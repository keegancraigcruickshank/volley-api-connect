// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: players/v1/private/players.proto

package playersv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	private "github.com/keegancraigcruickshank/volley-api-connect/players/v1/private"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PrivatePlayersServiceName is the fully-qualified name of the PrivatePlayersService service.
	PrivatePlayersServiceName = "players.v1.private.PrivatePlayersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PrivatePlayersServiceCreatePlayerProcedure is the fully-qualified name of the
	// PrivatePlayersService's CreatePlayer RPC.
	PrivatePlayersServiceCreatePlayerProcedure = "/players.v1.private.PrivatePlayersService/CreatePlayer"
	// PrivatePlayersServiceRemovePlayersProcedure is the fully-qualified name of the
	// PrivatePlayersService's RemovePlayers RPC.
	PrivatePlayersServiceRemovePlayersProcedure = "/players.v1.private.PrivatePlayersService/RemovePlayers"
	// PrivatePlayersServiceModifyPlayerProcedure is the fully-qualified name of the
	// PrivatePlayersService's ModifyPlayer RPC.
	PrivatePlayersServiceModifyPlayerProcedure = "/players.v1.private.PrivatePlayersService/ModifyPlayer"
	// PrivatePlayersServiceListPlayersProcedure is the fully-qualified name of the
	// PrivatePlayersService's ListPlayers RPC.
	PrivatePlayersServiceListPlayersProcedure = "/players.v1.private.PrivatePlayersService/ListPlayers"
	// PrivatePlayersServiceGetPlayerProcedure is the fully-qualified name of the
	// PrivatePlayersService's GetPlayer RPC.
	PrivatePlayersServiceGetPlayerProcedure = "/players.v1.private.PrivatePlayersService/GetPlayer"
	// PrivatePlayersServiceAddPlayerExclusionProcedure is the fully-qualified name of the
	// PrivatePlayersService's AddPlayerExclusion RPC.
	PrivatePlayersServiceAddPlayerExclusionProcedure = "/players.v1.private.PrivatePlayersService/AddPlayerExclusion"
	// PrivatePlayersServiceRemovePlayerExclusionProcedure is the fully-qualified name of the
	// PrivatePlayersService's RemovePlayerExclusion RPC.
	PrivatePlayersServiceRemovePlayerExclusionProcedure = "/players.v1.private.PrivatePlayersService/RemovePlayerExclusion"
)

// PrivatePlayersServiceClient is a client for the players.v1.private.PrivatePlayersService service.
type PrivatePlayersServiceClient interface {
	CreatePlayer(context.Context, *connect_go.Request[private.CreatePlayerRequest]) (*connect_go.Response[private.CreatePlayerResponse], error)
	RemovePlayers(context.Context, *connect_go.Request[private.RemovePlayersRequest]) (*connect_go.Response[private.RemovePlayersResponse], error)
	ModifyPlayer(context.Context, *connect_go.Request[private.ModifyPlayerRequest]) (*connect_go.Response[private.ModifyPlayerResponse], error)
	ListPlayers(context.Context, *connect_go.Request[private.ListPlayersRequest]) (*connect_go.Response[private.ListPlayersResponse], error)
	GetPlayer(context.Context, *connect_go.Request[private.GetPlayerRequest]) (*connect_go.Response[private.GetPlayerResponse], error)
	AddPlayerExclusion(context.Context, *connect_go.Request[private.AddPlayerExclusionRequest]) (*connect_go.Response[private.AddPlayerExclusionResponse], error)
	RemovePlayerExclusion(context.Context, *connect_go.Request[private.RemovePlayerExclusionRequest]) (*connect_go.Response[private.RemovePlayerExclusionResponse], error)
}

// NewPrivatePlayersServiceClient constructs a client for the
// players.v1.private.PrivatePlayersService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrivatePlayersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PrivatePlayersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &privatePlayersServiceClient{
		createPlayer: connect_go.NewClient[private.CreatePlayerRequest, private.CreatePlayerResponse](
			httpClient,
			baseURL+PrivatePlayersServiceCreatePlayerProcedure,
			opts...,
		),
		removePlayers: connect_go.NewClient[private.RemovePlayersRequest, private.RemovePlayersResponse](
			httpClient,
			baseURL+PrivatePlayersServiceRemovePlayersProcedure,
			opts...,
		),
		modifyPlayer: connect_go.NewClient[private.ModifyPlayerRequest, private.ModifyPlayerResponse](
			httpClient,
			baseURL+PrivatePlayersServiceModifyPlayerProcedure,
			opts...,
		),
		listPlayers: connect_go.NewClient[private.ListPlayersRequest, private.ListPlayersResponse](
			httpClient,
			baseURL+PrivatePlayersServiceListPlayersProcedure,
			opts...,
		),
		getPlayer: connect_go.NewClient[private.GetPlayerRequest, private.GetPlayerResponse](
			httpClient,
			baseURL+PrivatePlayersServiceGetPlayerProcedure,
			opts...,
		),
		addPlayerExclusion: connect_go.NewClient[private.AddPlayerExclusionRequest, private.AddPlayerExclusionResponse](
			httpClient,
			baseURL+PrivatePlayersServiceAddPlayerExclusionProcedure,
			opts...,
		),
		removePlayerExclusion: connect_go.NewClient[private.RemovePlayerExclusionRequest, private.RemovePlayerExclusionResponse](
			httpClient,
			baseURL+PrivatePlayersServiceRemovePlayerExclusionProcedure,
			opts...,
		),
	}
}

// privatePlayersServiceClient implements PrivatePlayersServiceClient.
type privatePlayersServiceClient struct {
	createPlayer          *connect_go.Client[private.CreatePlayerRequest, private.CreatePlayerResponse]
	removePlayers         *connect_go.Client[private.RemovePlayersRequest, private.RemovePlayersResponse]
	modifyPlayer          *connect_go.Client[private.ModifyPlayerRequest, private.ModifyPlayerResponse]
	listPlayers           *connect_go.Client[private.ListPlayersRequest, private.ListPlayersResponse]
	getPlayer             *connect_go.Client[private.GetPlayerRequest, private.GetPlayerResponse]
	addPlayerExclusion    *connect_go.Client[private.AddPlayerExclusionRequest, private.AddPlayerExclusionResponse]
	removePlayerExclusion *connect_go.Client[private.RemovePlayerExclusionRequest, private.RemovePlayerExclusionResponse]
}

// CreatePlayer calls players.v1.private.PrivatePlayersService.CreatePlayer.
func (c *privatePlayersServiceClient) CreatePlayer(ctx context.Context, req *connect_go.Request[private.CreatePlayerRequest]) (*connect_go.Response[private.CreatePlayerResponse], error) {
	return c.createPlayer.CallUnary(ctx, req)
}

// RemovePlayers calls players.v1.private.PrivatePlayersService.RemovePlayers.
func (c *privatePlayersServiceClient) RemovePlayers(ctx context.Context, req *connect_go.Request[private.RemovePlayersRequest]) (*connect_go.Response[private.RemovePlayersResponse], error) {
	return c.removePlayers.CallUnary(ctx, req)
}

// ModifyPlayer calls players.v1.private.PrivatePlayersService.ModifyPlayer.
func (c *privatePlayersServiceClient) ModifyPlayer(ctx context.Context, req *connect_go.Request[private.ModifyPlayerRequest]) (*connect_go.Response[private.ModifyPlayerResponse], error) {
	return c.modifyPlayer.CallUnary(ctx, req)
}

// ListPlayers calls players.v1.private.PrivatePlayersService.ListPlayers.
func (c *privatePlayersServiceClient) ListPlayers(ctx context.Context, req *connect_go.Request[private.ListPlayersRequest]) (*connect_go.Response[private.ListPlayersResponse], error) {
	return c.listPlayers.CallUnary(ctx, req)
}

// GetPlayer calls players.v1.private.PrivatePlayersService.GetPlayer.
func (c *privatePlayersServiceClient) GetPlayer(ctx context.Context, req *connect_go.Request[private.GetPlayerRequest]) (*connect_go.Response[private.GetPlayerResponse], error) {
	return c.getPlayer.CallUnary(ctx, req)
}

// AddPlayerExclusion calls players.v1.private.PrivatePlayersService.AddPlayerExclusion.
func (c *privatePlayersServiceClient) AddPlayerExclusion(ctx context.Context, req *connect_go.Request[private.AddPlayerExclusionRequest]) (*connect_go.Response[private.AddPlayerExclusionResponse], error) {
	return c.addPlayerExclusion.CallUnary(ctx, req)
}

// RemovePlayerExclusion calls players.v1.private.PrivatePlayersService.RemovePlayerExclusion.
func (c *privatePlayersServiceClient) RemovePlayerExclusion(ctx context.Context, req *connect_go.Request[private.RemovePlayerExclusionRequest]) (*connect_go.Response[private.RemovePlayerExclusionResponse], error) {
	return c.removePlayerExclusion.CallUnary(ctx, req)
}

// PrivatePlayersServiceHandler is an implementation of the players.v1.private.PrivatePlayersService
// service.
type PrivatePlayersServiceHandler interface {
	CreatePlayer(context.Context, *connect_go.Request[private.CreatePlayerRequest]) (*connect_go.Response[private.CreatePlayerResponse], error)
	RemovePlayers(context.Context, *connect_go.Request[private.RemovePlayersRequest]) (*connect_go.Response[private.RemovePlayersResponse], error)
	ModifyPlayer(context.Context, *connect_go.Request[private.ModifyPlayerRequest]) (*connect_go.Response[private.ModifyPlayerResponse], error)
	ListPlayers(context.Context, *connect_go.Request[private.ListPlayersRequest]) (*connect_go.Response[private.ListPlayersResponse], error)
	GetPlayer(context.Context, *connect_go.Request[private.GetPlayerRequest]) (*connect_go.Response[private.GetPlayerResponse], error)
	AddPlayerExclusion(context.Context, *connect_go.Request[private.AddPlayerExclusionRequest]) (*connect_go.Response[private.AddPlayerExclusionResponse], error)
	RemovePlayerExclusion(context.Context, *connect_go.Request[private.RemovePlayerExclusionRequest]) (*connect_go.Response[private.RemovePlayerExclusionResponse], error)
}

// NewPrivatePlayersServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrivatePlayersServiceHandler(svc PrivatePlayersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	privatePlayersServiceCreatePlayerHandler := connect_go.NewUnaryHandler(
		PrivatePlayersServiceCreatePlayerProcedure,
		svc.CreatePlayer,
		opts...,
	)
	privatePlayersServiceRemovePlayersHandler := connect_go.NewUnaryHandler(
		PrivatePlayersServiceRemovePlayersProcedure,
		svc.RemovePlayers,
		opts...,
	)
	privatePlayersServiceModifyPlayerHandler := connect_go.NewUnaryHandler(
		PrivatePlayersServiceModifyPlayerProcedure,
		svc.ModifyPlayer,
		opts...,
	)
	privatePlayersServiceListPlayersHandler := connect_go.NewUnaryHandler(
		PrivatePlayersServiceListPlayersProcedure,
		svc.ListPlayers,
		opts...,
	)
	privatePlayersServiceGetPlayerHandler := connect_go.NewUnaryHandler(
		PrivatePlayersServiceGetPlayerProcedure,
		svc.GetPlayer,
		opts...,
	)
	privatePlayersServiceAddPlayerExclusionHandler := connect_go.NewUnaryHandler(
		PrivatePlayersServiceAddPlayerExclusionProcedure,
		svc.AddPlayerExclusion,
		opts...,
	)
	privatePlayersServiceRemovePlayerExclusionHandler := connect_go.NewUnaryHandler(
		PrivatePlayersServiceRemovePlayerExclusionProcedure,
		svc.RemovePlayerExclusion,
		opts...,
	)
	return "/players.v1.private.PrivatePlayersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PrivatePlayersServiceCreatePlayerProcedure:
			privatePlayersServiceCreatePlayerHandler.ServeHTTP(w, r)
		case PrivatePlayersServiceRemovePlayersProcedure:
			privatePlayersServiceRemovePlayersHandler.ServeHTTP(w, r)
		case PrivatePlayersServiceModifyPlayerProcedure:
			privatePlayersServiceModifyPlayerHandler.ServeHTTP(w, r)
		case PrivatePlayersServiceListPlayersProcedure:
			privatePlayersServiceListPlayersHandler.ServeHTTP(w, r)
		case PrivatePlayersServiceGetPlayerProcedure:
			privatePlayersServiceGetPlayerHandler.ServeHTTP(w, r)
		case PrivatePlayersServiceAddPlayerExclusionProcedure:
			privatePlayersServiceAddPlayerExclusionHandler.ServeHTTP(w, r)
		case PrivatePlayersServiceRemovePlayerExclusionProcedure:
			privatePlayersServiceRemovePlayerExclusionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPrivatePlayersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrivatePlayersServiceHandler struct{}

func (UnimplementedPrivatePlayersServiceHandler) CreatePlayer(context.Context, *connect_go.Request[private.CreatePlayerRequest]) (*connect_go.Response[private.CreatePlayerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("players.v1.private.PrivatePlayersService.CreatePlayer is not implemented"))
}

func (UnimplementedPrivatePlayersServiceHandler) RemovePlayers(context.Context, *connect_go.Request[private.RemovePlayersRequest]) (*connect_go.Response[private.RemovePlayersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("players.v1.private.PrivatePlayersService.RemovePlayers is not implemented"))
}

func (UnimplementedPrivatePlayersServiceHandler) ModifyPlayer(context.Context, *connect_go.Request[private.ModifyPlayerRequest]) (*connect_go.Response[private.ModifyPlayerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("players.v1.private.PrivatePlayersService.ModifyPlayer is not implemented"))
}

func (UnimplementedPrivatePlayersServiceHandler) ListPlayers(context.Context, *connect_go.Request[private.ListPlayersRequest]) (*connect_go.Response[private.ListPlayersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("players.v1.private.PrivatePlayersService.ListPlayers is not implemented"))
}

func (UnimplementedPrivatePlayersServiceHandler) GetPlayer(context.Context, *connect_go.Request[private.GetPlayerRequest]) (*connect_go.Response[private.GetPlayerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("players.v1.private.PrivatePlayersService.GetPlayer is not implemented"))
}

func (UnimplementedPrivatePlayersServiceHandler) AddPlayerExclusion(context.Context, *connect_go.Request[private.AddPlayerExclusionRequest]) (*connect_go.Response[private.AddPlayerExclusionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("players.v1.private.PrivatePlayersService.AddPlayerExclusion is not implemented"))
}

func (UnimplementedPrivatePlayersServiceHandler) RemovePlayerExclusion(context.Context, *connect_go.Request[private.RemovePlayerExclusionRequest]) (*connect_go.Response[private.RemovePlayerExclusionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("players.v1.private.PrivatePlayersService.RemovePlayerExclusion is not implemented"))
}
