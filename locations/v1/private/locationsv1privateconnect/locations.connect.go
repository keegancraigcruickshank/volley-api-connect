// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: locations/v1/private/locations.proto

package locationsv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	private "github.com/keegancraigcruickshank/volley-api-connect/locations/v1/private"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PublicUsersServiceName is the fully-qualified name of the PublicUsersService service.
	PublicUsersServiceName = "locations.v1.private.PublicUsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PublicUsersServiceAddLocationProcedure is the fully-qualified name of the PublicUsersService's
	// AddLocation RPC.
	PublicUsersServiceAddLocationProcedure = "/locations.v1.private.PublicUsersService/AddLocation"
	// PublicUsersServiceModifyLocationProcedure is the fully-qualified name of the PublicUsersService's
	// ModifyLocation RPC.
	PublicUsersServiceModifyLocationProcedure = "/locations.v1.private.PublicUsersService/ModifyLocation"
)

// PublicUsersServiceClient is a client for the locations.v1.private.PublicUsersService service.
type PublicUsersServiceClient interface {
	AddLocation(context.Context, *connect_go.Request[private.AddLocationRequest]) (*connect_go.Response[private.AddLocationResponse], error)
	ModifyLocation(context.Context, *connect_go.Request[private.ModifyLocationRequest]) (*connect_go.Response[private.ModifyLocationResponse], error)
}

// NewPublicUsersServiceClient constructs a client for the locations.v1.private.PublicUsersService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublicUsersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PublicUsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &publicUsersServiceClient{
		addLocation: connect_go.NewClient[private.AddLocationRequest, private.AddLocationResponse](
			httpClient,
			baseURL+PublicUsersServiceAddLocationProcedure,
			opts...,
		),
		modifyLocation: connect_go.NewClient[private.ModifyLocationRequest, private.ModifyLocationResponse](
			httpClient,
			baseURL+PublicUsersServiceModifyLocationProcedure,
			opts...,
		),
	}
}

// publicUsersServiceClient implements PublicUsersServiceClient.
type publicUsersServiceClient struct {
	addLocation    *connect_go.Client[private.AddLocationRequest, private.AddLocationResponse]
	modifyLocation *connect_go.Client[private.ModifyLocationRequest, private.ModifyLocationResponse]
}

// AddLocation calls locations.v1.private.PublicUsersService.AddLocation.
func (c *publicUsersServiceClient) AddLocation(ctx context.Context, req *connect_go.Request[private.AddLocationRequest]) (*connect_go.Response[private.AddLocationResponse], error) {
	return c.addLocation.CallUnary(ctx, req)
}

// ModifyLocation calls locations.v1.private.PublicUsersService.ModifyLocation.
func (c *publicUsersServiceClient) ModifyLocation(ctx context.Context, req *connect_go.Request[private.ModifyLocationRequest]) (*connect_go.Response[private.ModifyLocationResponse], error) {
	return c.modifyLocation.CallUnary(ctx, req)
}

// PublicUsersServiceHandler is an implementation of the locations.v1.private.PublicUsersService
// service.
type PublicUsersServiceHandler interface {
	AddLocation(context.Context, *connect_go.Request[private.AddLocationRequest]) (*connect_go.Response[private.AddLocationResponse], error)
	ModifyLocation(context.Context, *connect_go.Request[private.ModifyLocationRequest]) (*connect_go.Response[private.ModifyLocationResponse], error)
}

// NewPublicUsersServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublicUsersServiceHandler(svc PublicUsersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PublicUsersServiceAddLocationProcedure, connect_go.NewUnaryHandler(
		PublicUsersServiceAddLocationProcedure,
		svc.AddLocation,
		opts...,
	))
	mux.Handle(PublicUsersServiceModifyLocationProcedure, connect_go.NewUnaryHandler(
		PublicUsersServiceModifyLocationProcedure,
		svc.ModifyLocation,
		opts...,
	))
	return "/locations.v1.private.PublicUsersService/", mux
}

// UnimplementedPublicUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPublicUsersServiceHandler struct{}

func (UnimplementedPublicUsersServiceHandler) AddLocation(context.Context, *connect_go.Request[private.AddLocationRequest]) (*connect_go.Response[private.AddLocationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("locations.v1.private.PublicUsersService.AddLocation is not implemented"))
}

func (UnimplementedPublicUsersServiceHandler) ModifyLocation(context.Context, *connect_go.Request[private.ModifyLocationRequest]) (*connect_go.Response[private.ModifyLocationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("locations.v1.private.PublicUsersService.ModifyLocation is not implemented"))
}
