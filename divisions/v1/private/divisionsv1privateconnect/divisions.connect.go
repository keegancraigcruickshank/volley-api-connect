// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: divisions/v1/private/divisions.proto

package divisionsv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	private "github.com/keegancraigcruickshank/volley-api-connect/divisions/v1/private"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PrivateDivisionsServiceName is the fully-qualified name of the PrivateDivisionsService service.
	PrivateDivisionsServiceName = "divisions.v1.private.PrivateDivisionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PrivateDivisionsServiceAddDivisionProcedure is the fully-qualified name of the
	// PrivateDivisionsService's AddDivision RPC.
	PrivateDivisionsServiceAddDivisionProcedure = "/divisions.v1.private.PrivateDivisionsService/AddDivision"
	// PrivateDivisionsServiceRemoveDivisionsProcedure is the fully-qualified name of the
	// PrivateDivisionsService's RemoveDivisions RPC.
	PrivateDivisionsServiceRemoveDivisionsProcedure = "/divisions.v1.private.PrivateDivisionsService/RemoveDivisions"
	// PrivateDivisionsServiceListDivisionsProcedure is the fully-qualified name of the
	// PrivateDivisionsService's ListDivisions RPC.
	PrivateDivisionsServiceListDivisionsProcedure = "/divisions.v1.private.PrivateDivisionsService/ListDivisions"
	// PrivateDivisionsServiceUpdateDivisionProcedure is the fully-qualified name of the
	// PrivateDivisionsService's UpdateDivision RPC.
	PrivateDivisionsServiceUpdateDivisionProcedure = "/divisions.v1.private.PrivateDivisionsService/UpdateDivision"
	// PrivateDivisionsServiceGetDivisionProcedure is the fully-qualified name of the
	// PrivateDivisionsService's GetDivision RPC.
	PrivateDivisionsServiceGetDivisionProcedure = "/divisions.v1.private.PrivateDivisionsService/GetDivision"
)

// PrivateDivisionsServiceClient is a client for the divisions.v1.private.PrivateDivisionsService
// service.
type PrivateDivisionsServiceClient interface {
	AddDivision(context.Context, *connect_go.Request[private.AddDivisionRequest]) (*connect_go.Response[private.AddDivisionResponse], error)
	RemoveDivisions(context.Context, *connect_go.Request[private.RemoveDivisionsRequest]) (*connect_go.Response[private.RemoveDivisionsResponse], error)
	ListDivisions(context.Context, *connect_go.Request[private.ListDivisionsRequest]) (*connect_go.Response[private.ListDivisionsResponse], error)
	UpdateDivision(context.Context, *connect_go.Request[private.UpdateDivisionRequest]) (*connect_go.Response[private.UpdateDivisionResponse], error)
	GetDivision(context.Context, *connect_go.Request[private.GetDivisionRequest]) (*connect_go.Response[private.GetDivisionResponse], error)
}

// NewPrivateDivisionsServiceClient constructs a client for the
// divisions.v1.private.PrivateDivisionsService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrivateDivisionsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PrivateDivisionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &privateDivisionsServiceClient{
		addDivision: connect_go.NewClient[private.AddDivisionRequest, private.AddDivisionResponse](
			httpClient,
			baseURL+PrivateDivisionsServiceAddDivisionProcedure,
			opts...,
		),
		removeDivisions: connect_go.NewClient[private.RemoveDivisionsRequest, private.RemoveDivisionsResponse](
			httpClient,
			baseURL+PrivateDivisionsServiceRemoveDivisionsProcedure,
			opts...,
		),
		listDivisions: connect_go.NewClient[private.ListDivisionsRequest, private.ListDivisionsResponse](
			httpClient,
			baseURL+PrivateDivisionsServiceListDivisionsProcedure,
			opts...,
		),
		updateDivision: connect_go.NewClient[private.UpdateDivisionRequest, private.UpdateDivisionResponse](
			httpClient,
			baseURL+PrivateDivisionsServiceUpdateDivisionProcedure,
			opts...,
		),
		getDivision: connect_go.NewClient[private.GetDivisionRequest, private.GetDivisionResponse](
			httpClient,
			baseURL+PrivateDivisionsServiceGetDivisionProcedure,
			opts...,
		),
	}
}

// privateDivisionsServiceClient implements PrivateDivisionsServiceClient.
type privateDivisionsServiceClient struct {
	addDivision     *connect_go.Client[private.AddDivisionRequest, private.AddDivisionResponse]
	removeDivisions *connect_go.Client[private.RemoveDivisionsRequest, private.RemoveDivisionsResponse]
	listDivisions   *connect_go.Client[private.ListDivisionsRequest, private.ListDivisionsResponse]
	updateDivision  *connect_go.Client[private.UpdateDivisionRequest, private.UpdateDivisionResponse]
	getDivision     *connect_go.Client[private.GetDivisionRequest, private.GetDivisionResponse]
}

// AddDivision calls divisions.v1.private.PrivateDivisionsService.AddDivision.
func (c *privateDivisionsServiceClient) AddDivision(ctx context.Context, req *connect_go.Request[private.AddDivisionRequest]) (*connect_go.Response[private.AddDivisionResponse], error) {
	return c.addDivision.CallUnary(ctx, req)
}

// RemoveDivisions calls divisions.v1.private.PrivateDivisionsService.RemoveDivisions.
func (c *privateDivisionsServiceClient) RemoveDivisions(ctx context.Context, req *connect_go.Request[private.RemoveDivisionsRequest]) (*connect_go.Response[private.RemoveDivisionsResponse], error) {
	return c.removeDivisions.CallUnary(ctx, req)
}

// ListDivisions calls divisions.v1.private.PrivateDivisionsService.ListDivisions.
func (c *privateDivisionsServiceClient) ListDivisions(ctx context.Context, req *connect_go.Request[private.ListDivisionsRequest]) (*connect_go.Response[private.ListDivisionsResponse], error) {
	return c.listDivisions.CallUnary(ctx, req)
}

// UpdateDivision calls divisions.v1.private.PrivateDivisionsService.UpdateDivision.
func (c *privateDivisionsServiceClient) UpdateDivision(ctx context.Context, req *connect_go.Request[private.UpdateDivisionRequest]) (*connect_go.Response[private.UpdateDivisionResponse], error) {
	return c.updateDivision.CallUnary(ctx, req)
}

// GetDivision calls divisions.v1.private.PrivateDivisionsService.GetDivision.
func (c *privateDivisionsServiceClient) GetDivision(ctx context.Context, req *connect_go.Request[private.GetDivisionRequest]) (*connect_go.Response[private.GetDivisionResponse], error) {
	return c.getDivision.CallUnary(ctx, req)
}

// PrivateDivisionsServiceHandler is an implementation of the
// divisions.v1.private.PrivateDivisionsService service.
type PrivateDivisionsServiceHandler interface {
	AddDivision(context.Context, *connect_go.Request[private.AddDivisionRequest]) (*connect_go.Response[private.AddDivisionResponse], error)
	RemoveDivisions(context.Context, *connect_go.Request[private.RemoveDivisionsRequest]) (*connect_go.Response[private.RemoveDivisionsResponse], error)
	ListDivisions(context.Context, *connect_go.Request[private.ListDivisionsRequest]) (*connect_go.Response[private.ListDivisionsResponse], error)
	UpdateDivision(context.Context, *connect_go.Request[private.UpdateDivisionRequest]) (*connect_go.Response[private.UpdateDivisionResponse], error)
	GetDivision(context.Context, *connect_go.Request[private.GetDivisionRequest]) (*connect_go.Response[private.GetDivisionResponse], error)
}

// NewPrivateDivisionsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrivateDivisionsServiceHandler(svc PrivateDivisionsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	privateDivisionsServiceAddDivisionHandler := connect_go.NewUnaryHandler(
		PrivateDivisionsServiceAddDivisionProcedure,
		svc.AddDivision,
		opts...,
	)
	privateDivisionsServiceRemoveDivisionsHandler := connect_go.NewUnaryHandler(
		PrivateDivisionsServiceRemoveDivisionsProcedure,
		svc.RemoveDivisions,
		opts...,
	)
	privateDivisionsServiceListDivisionsHandler := connect_go.NewUnaryHandler(
		PrivateDivisionsServiceListDivisionsProcedure,
		svc.ListDivisions,
		opts...,
	)
	privateDivisionsServiceUpdateDivisionHandler := connect_go.NewUnaryHandler(
		PrivateDivisionsServiceUpdateDivisionProcedure,
		svc.UpdateDivision,
		opts...,
	)
	privateDivisionsServiceGetDivisionHandler := connect_go.NewUnaryHandler(
		PrivateDivisionsServiceGetDivisionProcedure,
		svc.GetDivision,
		opts...,
	)
	return "/divisions.v1.private.PrivateDivisionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PrivateDivisionsServiceAddDivisionProcedure:
			privateDivisionsServiceAddDivisionHandler.ServeHTTP(w, r)
		case PrivateDivisionsServiceRemoveDivisionsProcedure:
			privateDivisionsServiceRemoveDivisionsHandler.ServeHTTP(w, r)
		case PrivateDivisionsServiceListDivisionsProcedure:
			privateDivisionsServiceListDivisionsHandler.ServeHTTP(w, r)
		case PrivateDivisionsServiceUpdateDivisionProcedure:
			privateDivisionsServiceUpdateDivisionHandler.ServeHTTP(w, r)
		case PrivateDivisionsServiceGetDivisionProcedure:
			privateDivisionsServiceGetDivisionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPrivateDivisionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrivateDivisionsServiceHandler struct{}

func (UnimplementedPrivateDivisionsServiceHandler) AddDivision(context.Context, *connect_go.Request[private.AddDivisionRequest]) (*connect_go.Response[private.AddDivisionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("divisions.v1.private.PrivateDivisionsService.AddDivision is not implemented"))
}

func (UnimplementedPrivateDivisionsServiceHandler) RemoveDivisions(context.Context, *connect_go.Request[private.RemoveDivisionsRequest]) (*connect_go.Response[private.RemoveDivisionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("divisions.v1.private.PrivateDivisionsService.RemoveDivisions is not implemented"))
}

func (UnimplementedPrivateDivisionsServiceHandler) ListDivisions(context.Context, *connect_go.Request[private.ListDivisionsRequest]) (*connect_go.Response[private.ListDivisionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("divisions.v1.private.PrivateDivisionsService.ListDivisions is not implemented"))
}

func (UnimplementedPrivateDivisionsServiceHandler) UpdateDivision(context.Context, *connect_go.Request[private.UpdateDivisionRequest]) (*connect_go.Response[private.UpdateDivisionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("divisions.v1.private.PrivateDivisionsService.UpdateDivision is not implemented"))
}

func (UnimplementedPrivateDivisionsServiceHandler) GetDivision(context.Context, *connect_go.Request[private.GetDivisionRequest]) (*connect_go.Response[private.GetDivisionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("divisions.v1.private.PrivateDivisionsService.GetDivision is not implemented"))
}
