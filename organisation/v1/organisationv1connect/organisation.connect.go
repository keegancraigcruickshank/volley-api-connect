// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: organisation/v1/organisation.proto

package organisationv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/keegancraigcruickshank/volley-api-connect/organisation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OrganisationServiceName is the fully-qualified name of the OrganisationService service.
	OrganisationServiceName = "organisation.v1.OrganisationService"
)

// OrganisationServiceClient is a client for the organisation.v1.OrganisationService service.
type OrganisationServiceClient interface {
	CreateOrganisation(context.Context, *connect_go.Request[v1.CreateOrganisationRequest]) (*connect_go.Response[v1.CreateOrganisationResponse], error)
	OrgDoesExist(context.Context, *connect_go.Request[v1.OrgDoesExistRequest]) (*connect_go.Response[v1.OrgDoesExistResponse], error)
}

// NewOrganisationServiceClient constructs a client for the organisation.v1.OrganisationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganisationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OrganisationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &organisationServiceClient{
		createOrganisation: connect_go.NewClient[v1.CreateOrganisationRequest, v1.CreateOrganisationResponse](
			httpClient,
			baseURL+"/organisation.v1.OrganisationService/CreateOrganisation",
			opts...,
		),
		orgDoesExist: connect_go.NewClient[v1.OrgDoesExistRequest, v1.OrgDoesExistResponse](
			httpClient,
			baseURL+"/organisation.v1.OrganisationService/OrgDoesExist",
			opts...,
		),
	}
}

// organisationServiceClient implements OrganisationServiceClient.
type organisationServiceClient struct {
	createOrganisation *connect_go.Client[v1.CreateOrganisationRequest, v1.CreateOrganisationResponse]
	orgDoesExist       *connect_go.Client[v1.OrgDoesExistRequest, v1.OrgDoesExistResponse]
}

// CreateOrganisation calls organisation.v1.OrganisationService.CreateOrganisation.
func (c *organisationServiceClient) CreateOrganisation(ctx context.Context, req *connect_go.Request[v1.CreateOrganisationRequest]) (*connect_go.Response[v1.CreateOrganisationResponse], error) {
	return c.createOrganisation.CallUnary(ctx, req)
}

// OrgDoesExist calls organisation.v1.OrganisationService.OrgDoesExist.
func (c *organisationServiceClient) OrgDoesExist(ctx context.Context, req *connect_go.Request[v1.OrgDoesExistRequest]) (*connect_go.Response[v1.OrgDoesExistResponse], error) {
	return c.orgDoesExist.CallUnary(ctx, req)
}

// OrganisationServiceHandler is an implementation of the organisation.v1.OrganisationService
// service.
type OrganisationServiceHandler interface {
	CreateOrganisation(context.Context, *connect_go.Request[v1.CreateOrganisationRequest]) (*connect_go.Response[v1.CreateOrganisationResponse], error)
	OrgDoesExist(context.Context, *connect_go.Request[v1.OrgDoesExistRequest]) (*connect_go.Response[v1.OrgDoesExistResponse], error)
}

// NewOrganisationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganisationServiceHandler(svc OrganisationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/organisation.v1.OrganisationService/CreateOrganisation", connect_go.NewUnaryHandler(
		"/organisation.v1.OrganisationService/CreateOrganisation",
		svc.CreateOrganisation,
		opts...,
	))
	mux.Handle("/organisation.v1.OrganisationService/OrgDoesExist", connect_go.NewUnaryHandler(
		"/organisation.v1.OrganisationService/OrgDoesExist",
		svc.OrgDoesExist,
		opts...,
	))
	return "/organisation.v1.OrganisationService/", mux
}

// UnimplementedOrganisationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganisationServiceHandler struct{}

func (UnimplementedOrganisationServiceHandler) CreateOrganisation(context.Context, *connect_go.Request[v1.CreateOrganisationRequest]) (*connect_go.Response[v1.CreateOrganisationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("organisation.v1.OrganisationService.CreateOrganisation is not implemented"))
}

func (UnimplementedOrganisationServiceHandler) OrgDoesExist(context.Context, *connect_go.Request[v1.OrgDoesExistRequest]) (*connect_go.Response[v1.OrgDoesExistResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("organisation.v1.OrganisationService.OrgDoesExist is not implemented"))
}
