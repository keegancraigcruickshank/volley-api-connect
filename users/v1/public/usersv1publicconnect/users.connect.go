// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/public/users.proto

package usersv1publicconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	public "github.com/keegancraigcruickshank/volley-api-connect/users/v1/public"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PublicUsersServiceName is the fully-qualified name of the PublicUsersService service.
	PublicUsersServiceName = "users.v1.public.PublicUsersService"
)

// PublicUsersServiceClient is a client for the users.v1.public.PublicUsersService service.
type PublicUsersServiceClient interface {
	RegisterUser(context.Context, *connect_go.Request[public.RegisterUserRequest]) (*connect_go.Response[public.RegisterUserResponse], error)
	LoginUser(context.Context, *connect_go.Request[public.LoginUserRequest]) (*connect_go.Response[public.LoginUserResponse], error)
}

// NewPublicUsersServiceClient constructs a client for the users.v1.public.PublicUsersService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublicUsersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PublicUsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &publicUsersServiceClient{
		registerUser: connect_go.NewClient[public.RegisterUserRequest, public.RegisterUserResponse](
			httpClient,
			baseURL+"/users.v1.public.PublicUsersService/RegisterUser",
			opts...,
		),
		loginUser: connect_go.NewClient[public.LoginUserRequest, public.LoginUserResponse](
			httpClient,
			baseURL+"/users.v1.public.PublicUsersService/LoginUser",
			opts...,
		),
	}
}

// publicUsersServiceClient implements PublicUsersServiceClient.
type publicUsersServiceClient struct {
	registerUser *connect_go.Client[public.RegisterUserRequest, public.RegisterUserResponse]
	loginUser    *connect_go.Client[public.LoginUserRequest, public.LoginUserResponse]
}

// RegisterUser calls users.v1.public.PublicUsersService.RegisterUser.
func (c *publicUsersServiceClient) RegisterUser(ctx context.Context, req *connect_go.Request[public.RegisterUserRequest]) (*connect_go.Response[public.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// LoginUser calls users.v1.public.PublicUsersService.LoginUser.
func (c *publicUsersServiceClient) LoginUser(ctx context.Context, req *connect_go.Request[public.LoginUserRequest]) (*connect_go.Response[public.LoginUserResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// PublicUsersServiceHandler is an implementation of the users.v1.public.PublicUsersService service.
type PublicUsersServiceHandler interface {
	RegisterUser(context.Context, *connect_go.Request[public.RegisterUserRequest]) (*connect_go.Response[public.RegisterUserResponse], error)
	LoginUser(context.Context, *connect_go.Request[public.LoginUserRequest]) (*connect_go.Response[public.LoginUserResponse], error)
}

// NewPublicUsersServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublicUsersServiceHandler(svc PublicUsersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/users.v1.public.PublicUsersService/RegisterUser", connect_go.NewUnaryHandler(
		"/users.v1.public.PublicUsersService/RegisterUser",
		svc.RegisterUser,
		opts...,
	))
	mux.Handle("/users.v1.public.PublicUsersService/LoginUser", connect_go.NewUnaryHandler(
		"/users.v1.public.PublicUsersService/LoginUser",
		svc.LoginUser,
		opts...,
	))
	return "/users.v1.public.PublicUsersService/", mux
}

// UnimplementedPublicUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPublicUsersServiceHandler struct{}

func (UnimplementedPublicUsersServiceHandler) RegisterUser(context.Context, *connect_go.Request[public.RegisterUserRequest]) (*connect_go.Response[public.RegisterUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.public.PublicUsersService.RegisterUser is not implemented"))
}

func (UnimplementedPublicUsersServiceHandler) LoginUser(context.Context, *connect_go.Request[public.LoginUserRequest]) (*connect_go.Response[public.LoginUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.public.PublicUsersService.LoginUser is not implemented"))
}
