// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/public/users.proto

package usersv1publicconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	public "github.com/keegancraigcruickshank/volley-api-connect/users/v1/public"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PublicUsersServiceName is the fully-qualified name of the PublicUsersService service.
	PublicUsersServiceName = "users.v1.public.PublicUsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PublicUsersServiceLoginProcedure is the fully-qualified name of the PublicUsersService's Login
	// RPC.
	PublicUsersServiceLoginProcedure = "/users.v1.public.PublicUsersService/Login"
	// PublicUsersServiceRefreshTokenProcedure is the fully-qualified name of the PublicUsersService's
	// RefreshToken RPC.
	PublicUsersServiceRefreshTokenProcedure = "/users.v1.public.PublicUsersService/RefreshToken"
	// PublicUsersServiceCreateUserProcedure is the fully-qualified name of the PublicUsersService's
	// CreateUser RPC.
	PublicUsersServiceCreateUserProcedure = "/users.v1.public.PublicUsersService/CreateUser"
	// PublicUsersServiceVerifyEmailProcedure is the fully-qualified name of the PublicUsersService's
	// VerifyEmail RPC.
	PublicUsersServiceVerifyEmailProcedure = "/users.v1.public.PublicUsersService/VerifyEmail"
	// PublicUsersServiceSendResetPasswordLinkProcedure is the fully-qualified name of the
	// PublicUsersService's SendResetPasswordLink RPC.
	PublicUsersServiceSendResetPasswordLinkProcedure = "/users.v1.public.PublicUsersService/SendResetPasswordLink"
	// PublicUsersServiceResetPasswordProcedure is the fully-qualified name of the PublicUsersService's
	// ResetPassword RPC.
	PublicUsersServiceResetPasswordProcedure = "/users.v1.public.PublicUsersService/ResetPassword"
)

// PublicUsersServiceClient is a client for the users.v1.public.PublicUsersService service.
type PublicUsersServiceClient interface {
	Login(context.Context, *connect_go.Request[public.LoginRequest]) (*connect_go.Response[public.LoginResponse], error)
	RefreshToken(context.Context, *connect_go.Request[public.RefreshTokenRequest]) (*connect_go.Response[public.RefreshTokenResponse], error)
	CreateUser(context.Context, *connect_go.Request[public.CreateUserRequest]) (*connect_go.Response[public.CreateUserResponse], error)
	VerifyEmail(context.Context, *connect_go.Request[public.VerifyEmailRequest]) (*connect_go.Response[public.VerifyEmailResponse], error)
	SendResetPasswordLink(context.Context, *connect_go.Request[public.SendResetPasswordLinkRequest]) (*connect_go.Response[public.SendResetPasswordLinkResponse], error)
	ResetPassword(context.Context, *connect_go.Request[public.ResetPasswordRequest]) (*connect_go.Response[public.ResetPasswordResponse], error)
}

// NewPublicUsersServiceClient constructs a client for the users.v1.public.PublicUsersService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublicUsersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PublicUsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &publicUsersServiceClient{
		login: connect_go.NewClient[public.LoginRequest, public.LoginResponse](
			httpClient,
			baseURL+PublicUsersServiceLoginProcedure,
			opts...,
		),
		refreshToken: connect_go.NewClient[public.RefreshTokenRequest, public.RefreshTokenResponse](
			httpClient,
			baseURL+PublicUsersServiceRefreshTokenProcedure,
			opts...,
		),
		createUser: connect_go.NewClient[public.CreateUserRequest, public.CreateUserResponse](
			httpClient,
			baseURL+PublicUsersServiceCreateUserProcedure,
			opts...,
		),
		verifyEmail: connect_go.NewClient[public.VerifyEmailRequest, public.VerifyEmailResponse](
			httpClient,
			baseURL+PublicUsersServiceVerifyEmailProcedure,
			opts...,
		),
		sendResetPasswordLink: connect_go.NewClient[public.SendResetPasswordLinkRequest, public.SendResetPasswordLinkResponse](
			httpClient,
			baseURL+PublicUsersServiceSendResetPasswordLinkProcedure,
			opts...,
		),
		resetPassword: connect_go.NewClient[public.ResetPasswordRequest, public.ResetPasswordResponse](
			httpClient,
			baseURL+PublicUsersServiceResetPasswordProcedure,
			opts...,
		),
	}
}

// publicUsersServiceClient implements PublicUsersServiceClient.
type publicUsersServiceClient struct {
	login                 *connect_go.Client[public.LoginRequest, public.LoginResponse]
	refreshToken          *connect_go.Client[public.RefreshTokenRequest, public.RefreshTokenResponse]
	createUser            *connect_go.Client[public.CreateUserRequest, public.CreateUserResponse]
	verifyEmail           *connect_go.Client[public.VerifyEmailRequest, public.VerifyEmailResponse]
	sendResetPasswordLink *connect_go.Client[public.SendResetPasswordLinkRequest, public.SendResetPasswordLinkResponse]
	resetPassword         *connect_go.Client[public.ResetPasswordRequest, public.ResetPasswordResponse]
}

// Login calls users.v1.public.PublicUsersService.Login.
func (c *publicUsersServiceClient) Login(ctx context.Context, req *connect_go.Request[public.LoginRequest]) (*connect_go.Response[public.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RefreshToken calls users.v1.public.PublicUsersService.RefreshToken.
func (c *publicUsersServiceClient) RefreshToken(ctx context.Context, req *connect_go.Request[public.RefreshTokenRequest]) (*connect_go.Response[public.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// CreateUser calls users.v1.public.PublicUsersService.CreateUser.
func (c *publicUsersServiceClient) CreateUser(ctx context.Context, req *connect_go.Request[public.CreateUserRequest]) (*connect_go.Response[public.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// VerifyEmail calls users.v1.public.PublicUsersService.VerifyEmail.
func (c *publicUsersServiceClient) VerifyEmail(ctx context.Context, req *connect_go.Request[public.VerifyEmailRequest]) (*connect_go.Response[public.VerifyEmailResponse], error) {
	return c.verifyEmail.CallUnary(ctx, req)
}

// SendResetPasswordLink calls users.v1.public.PublicUsersService.SendResetPasswordLink.
func (c *publicUsersServiceClient) SendResetPasswordLink(ctx context.Context, req *connect_go.Request[public.SendResetPasswordLinkRequest]) (*connect_go.Response[public.SendResetPasswordLinkResponse], error) {
	return c.sendResetPasswordLink.CallUnary(ctx, req)
}

// ResetPassword calls users.v1.public.PublicUsersService.ResetPassword.
func (c *publicUsersServiceClient) ResetPassword(ctx context.Context, req *connect_go.Request[public.ResetPasswordRequest]) (*connect_go.Response[public.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// PublicUsersServiceHandler is an implementation of the users.v1.public.PublicUsersService service.
type PublicUsersServiceHandler interface {
	Login(context.Context, *connect_go.Request[public.LoginRequest]) (*connect_go.Response[public.LoginResponse], error)
	RefreshToken(context.Context, *connect_go.Request[public.RefreshTokenRequest]) (*connect_go.Response[public.RefreshTokenResponse], error)
	CreateUser(context.Context, *connect_go.Request[public.CreateUserRequest]) (*connect_go.Response[public.CreateUserResponse], error)
	VerifyEmail(context.Context, *connect_go.Request[public.VerifyEmailRequest]) (*connect_go.Response[public.VerifyEmailResponse], error)
	SendResetPasswordLink(context.Context, *connect_go.Request[public.SendResetPasswordLinkRequest]) (*connect_go.Response[public.SendResetPasswordLinkResponse], error)
	ResetPassword(context.Context, *connect_go.Request[public.ResetPasswordRequest]) (*connect_go.Response[public.ResetPasswordResponse], error)
}

// NewPublicUsersServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublicUsersServiceHandler(svc PublicUsersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	publicUsersServiceLoginHandler := connect_go.NewUnaryHandler(
		PublicUsersServiceLoginProcedure,
		svc.Login,
		opts...,
	)
	publicUsersServiceRefreshTokenHandler := connect_go.NewUnaryHandler(
		PublicUsersServiceRefreshTokenProcedure,
		svc.RefreshToken,
		opts...,
	)
	publicUsersServiceCreateUserHandler := connect_go.NewUnaryHandler(
		PublicUsersServiceCreateUserProcedure,
		svc.CreateUser,
		opts...,
	)
	publicUsersServiceVerifyEmailHandler := connect_go.NewUnaryHandler(
		PublicUsersServiceVerifyEmailProcedure,
		svc.VerifyEmail,
		opts...,
	)
	publicUsersServiceSendResetPasswordLinkHandler := connect_go.NewUnaryHandler(
		PublicUsersServiceSendResetPasswordLinkProcedure,
		svc.SendResetPasswordLink,
		opts...,
	)
	publicUsersServiceResetPasswordHandler := connect_go.NewUnaryHandler(
		PublicUsersServiceResetPasswordProcedure,
		svc.ResetPassword,
		opts...,
	)
	return "/users.v1.public.PublicUsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PublicUsersServiceLoginProcedure:
			publicUsersServiceLoginHandler.ServeHTTP(w, r)
		case PublicUsersServiceRefreshTokenProcedure:
			publicUsersServiceRefreshTokenHandler.ServeHTTP(w, r)
		case PublicUsersServiceCreateUserProcedure:
			publicUsersServiceCreateUserHandler.ServeHTTP(w, r)
		case PublicUsersServiceVerifyEmailProcedure:
			publicUsersServiceVerifyEmailHandler.ServeHTTP(w, r)
		case PublicUsersServiceSendResetPasswordLinkProcedure:
			publicUsersServiceSendResetPasswordLinkHandler.ServeHTTP(w, r)
		case PublicUsersServiceResetPasswordProcedure:
			publicUsersServiceResetPasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPublicUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPublicUsersServiceHandler struct{}

func (UnimplementedPublicUsersServiceHandler) Login(context.Context, *connect_go.Request[public.LoginRequest]) (*connect_go.Response[public.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.public.PublicUsersService.Login is not implemented"))
}

func (UnimplementedPublicUsersServiceHandler) RefreshToken(context.Context, *connect_go.Request[public.RefreshTokenRequest]) (*connect_go.Response[public.RefreshTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.public.PublicUsersService.RefreshToken is not implemented"))
}

func (UnimplementedPublicUsersServiceHandler) CreateUser(context.Context, *connect_go.Request[public.CreateUserRequest]) (*connect_go.Response[public.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.public.PublicUsersService.CreateUser is not implemented"))
}

func (UnimplementedPublicUsersServiceHandler) VerifyEmail(context.Context, *connect_go.Request[public.VerifyEmailRequest]) (*connect_go.Response[public.VerifyEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.public.PublicUsersService.VerifyEmail is not implemented"))
}

func (UnimplementedPublicUsersServiceHandler) SendResetPasswordLink(context.Context, *connect_go.Request[public.SendResetPasswordLinkRequest]) (*connect_go.Response[public.SendResetPasswordLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.public.PublicUsersService.SendResetPasswordLink is not implemented"))
}

func (UnimplementedPublicUsersServiceHandler) ResetPassword(context.Context, *connect_go.Request[public.ResetPasswordRequest]) (*connect_go.Response[public.ResetPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.public.PublicUsersService.ResetPassword is not implemented"))
}
