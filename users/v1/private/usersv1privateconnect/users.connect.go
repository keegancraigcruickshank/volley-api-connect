// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/private/users.proto

package usersv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	private "github.com/keegancraigcruickshank/volley-api-connect/users/v1/private"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PrivateUsersServiceName is the fully-qualified name of the PrivateUsersService service.
	PrivateUsersServiceName = "users.v1.private.PrivateUsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PrivateUsersServiceGetMeProcedure is the fully-qualified name of the PrivateUsersService's GetMe
	// RPC.
	PrivateUsersServiceGetMeProcedure = "/users.v1.private.PrivateUsersService/GetMe"
	// PrivateUsersServiceSetDefaultOrgProcedure is the fully-qualified name of the
	// PrivateUsersService's SetDefaultOrg RPC.
	PrivateUsersServiceSetDefaultOrgProcedure = "/users.v1.private.PrivateUsersService/SetDefaultOrg"
	// PrivateUsersServiceCreateApiTokenProcedure is the fully-qualified name of the
	// PrivateUsersService's CreateApiToken RPC.
	PrivateUsersServiceCreateApiTokenProcedure = "/users.v1.private.PrivateUsersService/CreateApiToken"
	// PrivateUsersServiceListApiTokensProcedure is the fully-qualified name of the
	// PrivateUsersService's ListApiTokens RPC.
	PrivateUsersServiceListApiTokensProcedure = "/users.v1.private.PrivateUsersService/ListApiTokens"
	// PrivateUsersServiceRemoveApiTokenProcedure is the fully-qualified name of the
	// PrivateUsersService's RemoveApiToken RPC.
	PrivateUsersServiceRemoveApiTokenProcedure = "/users.v1.private.PrivateUsersService/RemoveApiToken"
	// PrivateUsersServiceListOrganisationsProcedure is the fully-qualified name of the
	// PrivateUsersService's ListOrganisations RPC.
	PrivateUsersServiceListOrganisationsProcedure = "/users.v1.private.PrivateUsersService/ListOrganisations"
	// PrivateUsersServiceCreateNewOrganisationProcedure is the fully-qualified name of the
	// PrivateUsersService's CreateNewOrganisation RPC.
	PrivateUsersServiceCreateNewOrganisationProcedure = "/users.v1.private.PrivateUsersService/CreateNewOrganisation"
	// PrivateUsersServiceFreshUserSetupProcedure is the fully-qualified name of the
	// PrivateUsersService's FreshUserSetup RPC.
	PrivateUsersServiceFreshUserSetupProcedure = "/users.v1.private.PrivateUsersService/FreshUserSetup"
	// PrivateUsersServiceDeleteOrganisationProcedure is the fully-qualified name of the
	// PrivateUsersService's DeleteOrganisation RPC.
	PrivateUsersServiceDeleteOrganisationProcedure = "/users.v1.private.PrivateUsersService/DeleteOrganisation"
)

// PrivateUsersServiceClient is a client for the users.v1.private.PrivateUsersService service.
type PrivateUsersServiceClient interface {
	GetMe(context.Context, *connect_go.Request[private.GetMeRequest]) (*connect_go.Response[private.GetMeResponse], error)
	SetDefaultOrg(context.Context, *connect_go.Request[private.SetDefaultOrgRequest]) (*connect_go.Response[private.SetDefaultOrgResponse], error)
	CreateApiToken(context.Context, *connect_go.Request[private.CreateApiTokenRequest]) (*connect_go.Response[private.CreateApiTokenResponse], error)
	ListApiTokens(context.Context, *connect_go.Request[private.ListApiTokensRequest]) (*connect_go.Response[private.ListApiTokensResponse], error)
	RemoveApiToken(context.Context, *connect_go.Request[private.RemoveApiTokenRequest]) (*connect_go.Response[private.RemoveApiTokenResponse], error)
	ListOrganisations(context.Context, *connect_go.Request[private.ListOrganisationsRequest]) (*connect_go.Response[private.ListOrganisationsResponse], error)
	CreateNewOrganisation(context.Context, *connect_go.Request[private.CreateNewOrganisationRequest]) (*connect_go.Response[private.CreateNewOrganisationResponse], error)
	FreshUserSetup(context.Context, *connect_go.Request[private.FreshUserSetupRequest]) (*connect_go.Response[private.FreshUserSetupResponse], error)
	DeleteOrganisation(context.Context, *connect_go.Request[private.DeleteOrganisationRequest]) (*connect_go.Response[private.DeleteOrganisationResponse], error)
}

// NewPrivateUsersServiceClient constructs a client for the users.v1.private.PrivateUsersService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrivateUsersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PrivateUsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &privateUsersServiceClient{
		getMe: connect_go.NewClient[private.GetMeRequest, private.GetMeResponse](
			httpClient,
			baseURL+PrivateUsersServiceGetMeProcedure,
			opts...,
		),
		setDefaultOrg: connect_go.NewClient[private.SetDefaultOrgRequest, private.SetDefaultOrgResponse](
			httpClient,
			baseURL+PrivateUsersServiceSetDefaultOrgProcedure,
			opts...,
		),
		createApiToken: connect_go.NewClient[private.CreateApiTokenRequest, private.CreateApiTokenResponse](
			httpClient,
			baseURL+PrivateUsersServiceCreateApiTokenProcedure,
			opts...,
		),
		listApiTokens: connect_go.NewClient[private.ListApiTokensRequest, private.ListApiTokensResponse](
			httpClient,
			baseURL+PrivateUsersServiceListApiTokensProcedure,
			opts...,
		),
		removeApiToken: connect_go.NewClient[private.RemoveApiTokenRequest, private.RemoveApiTokenResponse](
			httpClient,
			baseURL+PrivateUsersServiceRemoveApiTokenProcedure,
			opts...,
		),
		listOrganisations: connect_go.NewClient[private.ListOrganisationsRequest, private.ListOrganisationsResponse](
			httpClient,
			baseURL+PrivateUsersServiceListOrganisationsProcedure,
			opts...,
		),
		createNewOrganisation: connect_go.NewClient[private.CreateNewOrganisationRequest, private.CreateNewOrganisationResponse](
			httpClient,
			baseURL+PrivateUsersServiceCreateNewOrganisationProcedure,
			opts...,
		),
		freshUserSetup: connect_go.NewClient[private.FreshUserSetupRequest, private.FreshUserSetupResponse](
			httpClient,
			baseURL+PrivateUsersServiceFreshUserSetupProcedure,
			opts...,
		),
		deleteOrganisation: connect_go.NewClient[private.DeleteOrganisationRequest, private.DeleteOrganisationResponse](
			httpClient,
			baseURL+PrivateUsersServiceDeleteOrganisationProcedure,
			opts...,
		),
	}
}

// privateUsersServiceClient implements PrivateUsersServiceClient.
type privateUsersServiceClient struct {
	getMe                 *connect_go.Client[private.GetMeRequest, private.GetMeResponse]
	setDefaultOrg         *connect_go.Client[private.SetDefaultOrgRequest, private.SetDefaultOrgResponse]
	createApiToken        *connect_go.Client[private.CreateApiTokenRequest, private.CreateApiTokenResponse]
	listApiTokens         *connect_go.Client[private.ListApiTokensRequest, private.ListApiTokensResponse]
	removeApiToken        *connect_go.Client[private.RemoveApiTokenRequest, private.RemoveApiTokenResponse]
	listOrganisations     *connect_go.Client[private.ListOrganisationsRequest, private.ListOrganisationsResponse]
	createNewOrganisation *connect_go.Client[private.CreateNewOrganisationRequest, private.CreateNewOrganisationResponse]
	freshUserSetup        *connect_go.Client[private.FreshUserSetupRequest, private.FreshUserSetupResponse]
	deleteOrganisation    *connect_go.Client[private.DeleteOrganisationRequest, private.DeleteOrganisationResponse]
}

// GetMe calls users.v1.private.PrivateUsersService.GetMe.
func (c *privateUsersServiceClient) GetMe(ctx context.Context, req *connect_go.Request[private.GetMeRequest]) (*connect_go.Response[private.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// SetDefaultOrg calls users.v1.private.PrivateUsersService.SetDefaultOrg.
func (c *privateUsersServiceClient) SetDefaultOrg(ctx context.Context, req *connect_go.Request[private.SetDefaultOrgRequest]) (*connect_go.Response[private.SetDefaultOrgResponse], error) {
	return c.setDefaultOrg.CallUnary(ctx, req)
}

// CreateApiToken calls users.v1.private.PrivateUsersService.CreateApiToken.
func (c *privateUsersServiceClient) CreateApiToken(ctx context.Context, req *connect_go.Request[private.CreateApiTokenRequest]) (*connect_go.Response[private.CreateApiTokenResponse], error) {
	return c.createApiToken.CallUnary(ctx, req)
}

// ListApiTokens calls users.v1.private.PrivateUsersService.ListApiTokens.
func (c *privateUsersServiceClient) ListApiTokens(ctx context.Context, req *connect_go.Request[private.ListApiTokensRequest]) (*connect_go.Response[private.ListApiTokensResponse], error) {
	return c.listApiTokens.CallUnary(ctx, req)
}

// RemoveApiToken calls users.v1.private.PrivateUsersService.RemoveApiToken.
func (c *privateUsersServiceClient) RemoveApiToken(ctx context.Context, req *connect_go.Request[private.RemoveApiTokenRequest]) (*connect_go.Response[private.RemoveApiTokenResponse], error) {
	return c.removeApiToken.CallUnary(ctx, req)
}

// ListOrganisations calls users.v1.private.PrivateUsersService.ListOrganisations.
func (c *privateUsersServiceClient) ListOrganisations(ctx context.Context, req *connect_go.Request[private.ListOrganisationsRequest]) (*connect_go.Response[private.ListOrganisationsResponse], error) {
	return c.listOrganisations.CallUnary(ctx, req)
}

// CreateNewOrganisation calls users.v1.private.PrivateUsersService.CreateNewOrganisation.
func (c *privateUsersServiceClient) CreateNewOrganisation(ctx context.Context, req *connect_go.Request[private.CreateNewOrganisationRequest]) (*connect_go.Response[private.CreateNewOrganisationResponse], error) {
	return c.createNewOrganisation.CallUnary(ctx, req)
}

// FreshUserSetup calls users.v1.private.PrivateUsersService.FreshUserSetup.
func (c *privateUsersServiceClient) FreshUserSetup(ctx context.Context, req *connect_go.Request[private.FreshUserSetupRequest]) (*connect_go.Response[private.FreshUserSetupResponse], error) {
	return c.freshUserSetup.CallUnary(ctx, req)
}

// DeleteOrganisation calls users.v1.private.PrivateUsersService.DeleteOrganisation.
func (c *privateUsersServiceClient) DeleteOrganisation(ctx context.Context, req *connect_go.Request[private.DeleteOrganisationRequest]) (*connect_go.Response[private.DeleteOrganisationResponse], error) {
	return c.deleteOrganisation.CallUnary(ctx, req)
}

// PrivateUsersServiceHandler is an implementation of the users.v1.private.PrivateUsersService
// service.
type PrivateUsersServiceHandler interface {
	GetMe(context.Context, *connect_go.Request[private.GetMeRequest]) (*connect_go.Response[private.GetMeResponse], error)
	SetDefaultOrg(context.Context, *connect_go.Request[private.SetDefaultOrgRequest]) (*connect_go.Response[private.SetDefaultOrgResponse], error)
	CreateApiToken(context.Context, *connect_go.Request[private.CreateApiTokenRequest]) (*connect_go.Response[private.CreateApiTokenResponse], error)
	ListApiTokens(context.Context, *connect_go.Request[private.ListApiTokensRequest]) (*connect_go.Response[private.ListApiTokensResponse], error)
	RemoveApiToken(context.Context, *connect_go.Request[private.RemoveApiTokenRequest]) (*connect_go.Response[private.RemoveApiTokenResponse], error)
	ListOrganisations(context.Context, *connect_go.Request[private.ListOrganisationsRequest]) (*connect_go.Response[private.ListOrganisationsResponse], error)
	CreateNewOrganisation(context.Context, *connect_go.Request[private.CreateNewOrganisationRequest]) (*connect_go.Response[private.CreateNewOrganisationResponse], error)
	FreshUserSetup(context.Context, *connect_go.Request[private.FreshUserSetupRequest]) (*connect_go.Response[private.FreshUserSetupResponse], error)
	DeleteOrganisation(context.Context, *connect_go.Request[private.DeleteOrganisationRequest]) (*connect_go.Response[private.DeleteOrganisationResponse], error)
}

// NewPrivateUsersServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrivateUsersServiceHandler(svc PrivateUsersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	privateUsersServiceGetMeHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceGetMeProcedure,
		svc.GetMe,
		opts...,
	)
	privateUsersServiceSetDefaultOrgHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceSetDefaultOrgProcedure,
		svc.SetDefaultOrg,
		opts...,
	)
	privateUsersServiceCreateApiTokenHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceCreateApiTokenProcedure,
		svc.CreateApiToken,
		opts...,
	)
	privateUsersServiceListApiTokensHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceListApiTokensProcedure,
		svc.ListApiTokens,
		opts...,
	)
	privateUsersServiceRemoveApiTokenHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceRemoveApiTokenProcedure,
		svc.RemoveApiToken,
		opts...,
	)
	privateUsersServiceListOrganisationsHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceListOrganisationsProcedure,
		svc.ListOrganisations,
		opts...,
	)
	privateUsersServiceCreateNewOrganisationHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceCreateNewOrganisationProcedure,
		svc.CreateNewOrganisation,
		opts...,
	)
	privateUsersServiceFreshUserSetupHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceFreshUserSetupProcedure,
		svc.FreshUserSetup,
		opts...,
	)
	privateUsersServiceDeleteOrganisationHandler := connect_go.NewUnaryHandler(
		PrivateUsersServiceDeleteOrganisationProcedure,
		svc.DeleteOrganisation,
		opts...,
	)
	return "/users.v1.private.PrivateUsersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PrivateUsersServiceGetMeProcedure:
			privateUsersServiceGetMeHandler.ServeHTTP(w, r)
		case PrivateUsersServiceSetDefaultOrgProcedure:
			privateUsersServiceSetDefaultOrgHandler.ServeHTTP(w, r)
		case PrivateUsersServiceCreateApiTokenProcedure:
			privateUsersServiceCreateApiTokenHandler.ServeHTTP(w, r)
		case PrivateUsersServiceListApiTokensProcedure:
			privateUsersServiceListApiTokensHandler.ServeHTTP(w, r)
		case PrivateUsersServiceRemoveApiTokenProcedure:
			privateUsersServiceRemoveApiTokenHandler.ServeHTTP(w, r)
		case PrivateUsersServiceListOrganisationsProcedure:
			privateUsersServiceListOrganisationsHandler.ServeHTTP(w, r)
		case PrivateUsersServiceCreateNewOrganisationProcedure:
			privateUsersServiceCreateNewOrganisationHandler.ServeHTTP(w, r)
		case PrivateUsersServiceFreshUserSetupProcedure:
			privateUsersServiceFreshUserSetupHandler.ServeHTTP(w, r)
		case PrivateUsersServiceDeleteOrganisationProcedure:
			privateUsersServiceDeleteOrganisationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPrivateUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrivateUsersServiceHandler struct{}

func (UnimplementedPrivateUsersServiceHandler) GetMe(context.Context, *connect_go.Request[private.GetMeRequest]) (*connect_go.Response[private.GetMeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.GetMe is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) SetDefaultOrg(context.Context, *connect_go.Request[private.SetDefaultOrgRequest]) (*connect_go.Response[private.SetDefaultOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.SetDefaultOrg is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) CreateApiToken(context.Context, *connect_go.Request[private.CreateApiTokenRequest]) (*connect_go.Response[private.CreateApiTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.CreateApiToken is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) ListApiTokens(context.Context, *connect_go.Request[private.ListApiTokensRequest]) (*connect_go.Response[private.ListApiTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.ListApiTokens is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) RemoveApiToken(context.Context, *connect_go.Request[private.RemoveApiTokenRequest]) (*connect_go.Response[private.RemoveApiTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.RemoveApiToken is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) ListOrganisations(context.Context, *connect_go.Request[private.ListOrganisationsRequest]) (*connect_go.Response[private.ListOrganisationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.ListOrganisations is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) CreateNewOrganisation(context.Context, *connect_go.Request[private.CreateNewOrganisationRequest]) (*connect_go.Response[private.CreateNewOrganisationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.CreateNewOrganisation is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) FreshUserSetup(context.Context, *connect_go.Request[private.FreshUserSetupRequest]) (*connect_go.Response[private.FreshUserSetupResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.FreshUserSetup is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) DeleteOrganisation(context.Context, *connect_go.Request[private.DeleteOrganisationRequest]) (*connect_go.Response[private.DeleteOrganisationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.DeleteOrganisation is not implemented"))
}
