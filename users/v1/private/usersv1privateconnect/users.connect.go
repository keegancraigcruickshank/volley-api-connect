// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: users/v1/private/users.proto

package usersv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	private "github.com/keegancraigcruickshank/volley-api-connect/users/v1/private"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PrivateUsersServiceName is the fully-qualified name of the PrivateUsersService service.
	PrivateUsersServiceName = "users.v1.private.PrivateUsersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PrivateUsersServiceGetMeProcedure is the fully-qualified name of the PrivateUsersService's GetMe
	// RPC.
	PrivateUsersServiceGetMeProcedure = "/users.v1.private.PrivateUsersService/GetMe"
	// PrivateUsersServiceSetActiveOrgProcedure is the fully-qualified name of the PrivateUsersService's
	// SetActiveOrg RPC.
	PrivateUsersServiceSetActiveOrgProcedure = "/users.v1.private.PrivateUsersService/SetActiveOrg"
	// PrivateUsersServiceLogoutProcedure is the fully-qualified name of the PrivateUsersService's
	// Logout RPC.
	PrivateUsersServiceLogoutProcedure = "/users.v1.private.PrivateUsersService/Logout"
	// PrivateUsersServiceSetDefaultOrgProcedure is the fully-qualified name of the
	// PrivateUsersService's SetDefaultOrg RPC.
	PrivateUsersServiceSetDefaultOrgProcedure = "/users.v1.private.PrivateUsersService/SetDefaultOrg"
)

// PrivateUsersServiceClient is a client for the users.v1.private.PrivateUsersService service.
type PrivateUsersServiceClient interface {
	GetMe(context.Context, *connect_go.Request[private.GetMeRequest]) (*connect_go.Response[private.GetMeResponse], error)
	SetActiveOrg(context.Context, *connect_go.Request[private.SetActiveOrgRequest]) (*connect_go.Response[private.SetActiveOrgResponse], error)
	Logout(context.Context, *connect_go.Request[private.LogoutRequest]) (*connect_go.Response[private.LogoutResponse], error)
	SetDefaultOrg(context.Context, *connect_go.Request[private.SetDefaultOrgRequest]) (*connect_go.Response[private.SetDefaultOrgResponse], error)
}

// NewPrivateUsersServiceClient constructs a client for the users.v1.private.PrivateUsersService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrivateUsersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PrivateUsersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &privateUsersServiceClient{
		getMe: connect_go.NewClient[private.GetMeRequest, private.GetMeResponse](
			httpClient,
			baseURL+PrivateUsersServiceGetMeProcedure,
			opts...,
		),
		setActiveOrg: connect_go.NewClient[private.SetActiveOrgRequest, private.SetActiveOrgResponse](
			httpClient,
			baseURL+PrivateUsersServiceSetActiveOrgProcedure,
			opts...,
		),
		logout: connect_go.NewClient[private.LogoutRequest, private.LogoutResponse](
			httpClient,
			baseURL+PrivateUsersServiceLogoutProcedure,
			opts...,
		),
		setDefaultOrg: connect_go.NewClient[private.SetDefaultOrgRequest, private.SetDefaultOrgResponse](
			httpClient,
			baseURL+PrivateUsersServiceSetDefaultOrgProcedure,
			opts...,
		),
	}
}

// privateUsersServiceClient implements PrivateUsersServiceClient.
type privateUsersServiceClient struct {
	getMe         *connect_go.Client[private.GetMeRequest, private.GetMeResponse]
	setActiveOrg  *connect_go.Client[private.SetActiveOrgRequest, private.SetActiveOrgResponse]
	logout        *connect_go.Client[private.LogoutRequest, private.LogoutResponse]
	setDefaultOrg *connect_go.Client[private.SetDefaultOrgRequest, private.SetDefaultOrgResponse]
}

// GetMe calls users.v1.private.PrivateUsersService.GetMe.
func (c *privateUsersServiceClient) GetMe(ctx context.Context, req *connect_go.Request[private.GetMeRequest]) (*connect_go.Response[private.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// SetActiveOrg calls users.v1.private.PrivateUsersService.SetActiveOrg.
func (c *privateUsersServiceClient) SetActiveOrg(ctx context.Context, req *connect_go.Request[private.SetActiveOrgRequest]) (*connect_go.Response[private.SetActiveOrgResponse], error) {
	return c.setActiveOrg.CallUnary(ctx, req)
}

// Logout calls users.v1.private.PrivateUsersService.Logout.
func (c *privateUsersServiceClient) Logout(ctx context.Context, req *connect_go.Request[private.LogoutRequest]) (*connect_go.Response[private.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// SetDefaultOrg calls users.v1.private.PrivateUsersService.SetDefaultOrg.
func (c *privateUsersServiceClient) SetDefaultOrg(ctx context.Context, req *connect_go.Request[private.SetDefaultOrgRequest]) (*connect_go.Response[private.SetDefaultOrgResponse], error) {
	return c.setDefaultOrg.CallUnary(ctx, req)
}

// PrivateUsersServiceHandler is an implementation of the users.v1.private.PrivateUsersService
// service.
type PrivateUsersServiceHandler interface {
	GetMe(context.Context, *connect_go.Request[private.GetMeRequest]) (*connect_go.Response[private.GetMeResponse], error)
	SetActiveOrg(context.Context, *connect_go.Request[private.SetActiveOrgRequest]) (*connect_go.Response[private.SetActiveOrgResponse], error)
	Logout(context.Context, *connect_go.Request[private.LogoutRequest]) (*connect_go.Response[private.LogoutResponse], error)
	SetDefaultOrg(context.Context, *connect_go.Request[private.SetDefaultOrgRequest]) (*connect_go.Response[private.SetDefaultOrgResponse], error)
}

// NewPrivateUsersServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrivateUsersServiceHandler(svc PrivateUsersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PrivateUsersServiceGetMeProcedure, connect_go.NewUnaryHandler(
		PrivateUsersServiceGetMeProcedure,
		svc.GetMe,
		opts...,
	))
	mux.Handle(PrivateUsersServiceSetActiveOrgProcedure, connect_go.NewUnaryHandler(
		PrivateUsersServiceSetActiveOrgProcedure,
		svc.SetActiveOrg,
		opts...,
	))
	mux.Handle(PrivateUsersServiceLogoutProcedure, connect_go.NewUnaryHandler(
		PrivateUsersServiceLogoutProcedure,
		svc.Logout,
		opts...,
	))
	mux.Handle(PrivateUsersServiceSetDefaultOrgProcedure, connect_go.NewUnaryHandler(
		PrivateUsersServiceSetDefaultOrgProcedure,
		svc.SetDefaultOrg,
		opts...,
	))
	return "/users.v1.private.PrivateUsersService/", mux
}

// UnimplementedPrivateUsersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrivateUsersServiceHandler struct{}

func (UnimplementedPrivateUsersServiceHandler) GetMe(context.Context, *connect_go.Request[private.GetMeRequest]) (*connect_go.Response[private.GetMeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.GetMe is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) SetActiveOrg(context.Context, *connect_go.Request[private.SetActiveOrgRequest]) (*connect_go.Response[private.SetActiveOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.SetActiveOrg is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) Logout(context.Context, *connect_go.Request[private.LogoutRequest]) (*connect_go.Response[private.LogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.Logout is not implemented"))
}

func (UnimplementedPrivateUsersServiceHandler) SetDefaultOrg(context.Context, *connect_go.Request[private.SetDefaultOrgRequest]) (*connect_go.Response[private.SetDefaultOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("users.v1.private.PrivateUsersService.SetDefaultOrg is not implemented"))
}
