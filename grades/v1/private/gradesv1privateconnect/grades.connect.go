// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grades/v1/private/grades.proto

package gradesv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	grades "github.com/keegancraigcruickshank/volley-api-connect/grades/v1/grades"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PrivateTeamsServiceName is the fully-qualified name of the PrivateTeamsService service.
	PrivateTeamsServiceName = "grades.v1.private.PrivateTeamsService"
)

// PrivateTeamsServiceClient is a client for the grades.v1.private.PrivateTeamsService service.
type PrivateTeamsServiceClient interface {
	CreateGrade(context.Context, *connect_go.Request[grades.CreateGradeRequest]) (*connect_go.Response[grades.CreateGradeResponse], error)
	ListGrades(context.Context, *connect_go.Request[grades.ListGradesRequest]) (*connect_go.Response[grades.ListGradesResponse], error)
}

// NewPrivateTeamsServiceClient constructs a client for the grades.v1.private.PrivateTeamsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrivateTeamsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PrivateTeamsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &privateTeamsServiceClient{
		createGrade: connect_go.NewClient[grades.CreateGradeRequest, grades.CreateGradeResponse](
			httpClient,
			baseURL+"/grades.v1.private.PrivateTeamsService/CreateGrade",
			opts...,
		),
		listGrades: connect_go.NewClient[grades.ListGradesRequest, grades.ListGradesResponse](
			httpClient,
			baseURL+"/grades.v1.private.PrivateTeamsService/ListGrades",
			opts...,
		),
	}
}

// privateTeamsServiceClient implements PrivateTeamsServiceClient.
type privateTeamsServiceClient struct {
	createGrade *connect_go.Client[grades.CreateGradeRequest, grades.CreateGradeResponse]
	listGrades  *connect_go.Client[grades.ListGradesRequest, grades.ListGradesResponse]
}

// CreateGrade calls grades.v1.private.PrivateTeamsService.CreateGrade.
func (c *privateTeamsServiceClient) CreateGrade(ctx context.Context, req *connect_go.Request[grades.CreateGradeRequest]) (*connect_go.Response[grades.CreateGradeResponse], error) {
	return c.createGrade.CallUnary(ctx, req)
}

// ListGrades calls grades.v1.private.PrivateTeamsService.ListGrades.
func (c *privateTeamsServiceClient) ListGrades(ctx context.Context, req *connect_go.Request[grades.ListGradesRequest]) (*connect_go.Response[grades.ListGradesResponse], error) {
	return c.listGrades.CallUnary(ctx, req)
}

// PrivateTeamsServiceHandler is an implementation of the grades.v1.private.PrivateTeamsService
// service.
type PrivateTeamsServiceHandler interface {
	CreateGrade(context.Context, *connect_go.Request[grades.CreateGradeRequest]) (*connect_go.Response[grades.CreateGradeResponse], error)
	ListGrades(context.Context, *connect_go.Request[grades.ListGradesRequest]) (*connect_go.Response[grades.ListGradesResponse], error)
}

// NewPrivateTeamsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrivateTeamsServiceHandler(svc PrivateTeamsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/grades.v1.private.PrivateTeamsService/CreateGrade", connect_go.NewUnaryHandler(
		"/grades.v1.private.PrivateTeamsService/CreateGrade",
		svc.CreateGrade,
		opts...,
	))
	mux.Handle("/grades.v1.private.PrivateTeamsService/ListGrades", connect_go.NewUnaryHandler(
		"/grades.v1.private.PrivateTeamsService/ListGrades",
		svc.ListGrades,
		opts...,
	))
	return "/grades.v1.private.PrivateTeamsService/", mux
}

// UnimplementedPrivateTeamsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrivateTeamsServiceHandler struct{}

func (UnimplementedPrivateTeamsServiceHandler) CreateGrade(context.Context, *connect_go.Request[grades.CreateGradeRequest]) (*connect_go.Response[grades.CreateGradeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grades.v1.private.PrivateTeamsService.CreateGrade is not implemented"))
}

func (UnimplementedPrivateTeamsServiceHandler) ListGrades(context.Context, *connect_go.Request[grades.ListGradesRequest]) (*connect_go.Response[grades.ListGradesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grades.v1.private.PrivateTeamsService.ListGrades is not implemented"))
}
