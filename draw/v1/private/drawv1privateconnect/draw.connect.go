// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: draw/v1/private/draw.proto

package drawv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	private "github.com/keegancraigcruickshank/volley-api-connect/draw/v1/private"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DrawServiceName is the fully-qualified name of the DrawService service.
	DrawServiceName = "draw.v1.private.DrawService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DrawServiceCreateDrawProcedure is the fully-qualified name of the DrawService's CreateDraw RPC.
	DrawServiceCreateDrawProcedure = "/draw.v1.private.DrawService/CreateDraw"
	// DrawServiceGetDrawProcedure is the fully-qualified name of the DrawService's GetDraw RPC.
	DrawServiceGetDrawProcedure = "/draw.v1.private.DrawService/GetDraw"
	// DrawServiceUpdateDrawProcedure is the fully-qualified name of the DrawService's UpdateDraw RPC.
	DrawServiceUpdateDrawProcedure = "/draw.v1.private.DrawService/UpdateDraw"
	// DrawServiceDeleteDrawProcedure is the fully-qualified name of the DrawService's DeleteDraw RPC.
	DrawServiceDeleteDrawProcedure = "/draw.v1.private.DrawService/DeleteDraw"
	// DrawServiceGetDrawRoundProcedure is the fully-qualified name of the DrawService's GetDrawRound
	// RPC.
	DrawServiceGetDrawRoundProcedure = "/draw.v1.private.DrawService/GetDrawRound"
)

// DrawServiceClient is a client for the draw.v1.private.DrawService service.
type DrawServiceClient interface {
	CreateDraw(context.Context, *connect_go.Request[private.CreateDrawRequest]) (*connect_go.Response[private.CreateDrawResponse], error)
	GetDraw(context.Context, *connect_go.Request[private.GetDrawRequest]) (*connect_go.Response[private.GetDrawResponse], error)
	UpdateDraw(context.Context, *connect_go.Request[private.UpdateDrawRequest]) (*connect_go.Response[private.UpdateDrawResponse], error)
	DeleteDraw(context.Context, *connect_go.Request[private.DeleteDrawRequest]) (*connect_go.Response[private.DeleteDrawResponse], error)
	GetDrawRound(context.Context, *connect_go.Request[private.GetDrawRoundRequest]) (*connect_go.Response[private.GetDrawRoundResponse], error)
}

// NewDrawServiceClient constructs a client for the draw.v1.private.DrawService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDrawServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DrawServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &drawServiceClient{
		createDraw: connect_go.NewClient[private.CreateDrawRequest, private.CreateDrawResponse](
			httpClient,
			baseURL+DrawServiceCreateDrawProcedure,
			opts...,
		),
		getDraw: connect_go.NewClient[private.GetDrawRequest, private.GetDrawResponse](
			httpClient,
			baseURL+DrawServiceGetDrawProcedure,
			opts...,
		),
		updateDraw: connect_go.NewClient[private.UpdateDrawRequest, private.UpdateDrawResponse](
			httpClient,
			baseURL+DrawServiceUpdateDrawProcedure,
			opts...,
		),
		deleteDraw: connect_go.NewClient[private.DeleteDrawRequest, private.DeleteDrawResponse](
			httpClient,
			baseURL+DrawServiceDeleteDrawProcedure,
			opts...,
		),
		getDrawRound: connect_go.NewClient[private.GetDrawRoundRequest, private.GetDrawRoundResponse](
			httpClient,
			baseURL+DrawServiceGetDrawRoundProcedure,
			opts...,
		),
	}
}

// drawServiceClient implements DrawServiceClient.
type drawServiceClient struct {
	createDraw   *connect_go.Client[private.CreateDrawRequest, private.CreateDrawResponse]
	getDraw      *connect_go.Client[private.GetDrawRequest, private.GetDrawResponse]
	updateDraw   *connect_go.Client[private.UpdateDrawRequest, private.UpdateDrawResponse]
	deleteDraw   *connect_go.Client[private.DeleteDrawRequest, private.DeleteDrawResponse]
	getDrawRound *connect_go.Client[private.GetDrawRoundRequest, private.GetDrawRoundResponse]
}

// CreateDraw calls draw.v1.private.DrawService.CreateDraw.
func (c *drawServiceClient) CreateDraw(ctx context.Context, req *connect_go.Request[private.CreateDrawRequest]) (*connect_go.Response[private.CreateDrawResponse], error) {
	return c.createDraw.CallUnary(ctx, req)
}

// GetDraw calls draw.v1.private.DrawService.GetDraw.
func (c *drawServiceClient) GetDraw(ctx context.Context, req *connect_go.Request[private.GetDrawRequest]) (*connect_go.Response[private.GetDrawResponse], error) {
	return c.getDraw.CallUnary(ctx, req)
}

// UpdateDraw calls draw.v1.private.DrawService.UpdateDraw.
func (c *drawServiceClient) UpdateDraw(ctx context.Context, req *connect_go.Request[private.UpdateDrawRequest]) (*connect_go.Response[private.UpdateDrawResponse], error) {
	return c.updateDraw.CallUnary(ctx, req)
}

// DeleteDraw calls draw.v1.private.DrawService.DeleteDraw.
func (c *drawServiceClient) DeleteDraw(ctx context.Context, req *connect_go.Request[private.DeleteDrawRequest]) (*connect_go.Response[private.DeleteDrawResponse], error) {
	return c.deleteDraw.CallUnary(ctx, req)
}

// GetDrawRound calls draw.v1.private.DrawService.GetDrawRound.
func (c *drawServiceClient) GetDrawRound(ctx context.Context, req *connect_go.Request[private.GetDrawRoundRequest]) (*connect_go.Response[private.GetDrawRoundResponse], error) {
	return c.getDrawRound.CallUnary(ctx, req)
}

// DrawServiceHandler is an implementation of the draw.v1.private.DrawService service.
type DrawServiceHandler interface {
	CreateDraw(context.Context, *connect_go.Request[private.CreateDrawRequest]) (*connect_go.Response[private.CreateDrawResponse], error)
	GetDraw(context.Context, *connect_go.Request[private.GetDrawRequest]) (*connect_go.Response[private.GetDrawResponse], error)
	UpdateDraw(context.Context, *connect_go.Request[private.UpdateDrawRequest]) (*connect_go.Response[private.UpdateDrawResponse], error)
	DeleteDraw(context.Context, *connect_go.Request[private.DeleteDrawRequest]) (*connect_go.Response[private.DeleteDrawResponse], error)
	GetDrawRound(context.Context, *connect_go.Request[private.GetDrawRoundRequest]) (*connect_go.Response[private.GetDrawRoundResponse], error)
}

// NewDrawServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDrawServiceHandler(svc DrawServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	drawServiceCreateDrawHandler := connect_go.NewUnaryHandler(
		DrawServiceCreateDrawProcedure,
		svc.CreateDraw,
		opts...,
	)
	drawServiceGetDrawHandler := connect_go.NewUnaryHandler(
		DrawServiceGetDrawProcedure,
		svc.GetDraw,
		opts...,
	)
	drawServiceUpdateDrawHandler := connect_go.NewUnaryHandler(
		DrawServiceUpdateDrawProcedure,
		svc.UpdateDraw,
		opts...,
	)
	drawServiceDeleteDrawHandler := connect_go.NewUnaryHandler(
		DrawServiceDeleteDrawProcedure,
		svc.DeleteDraw,
		opts...,
	)
	drawServiceGetDrawRoundHandler := connect_go.NewUnaryHandler(
		DrawServiceGetDrawRoundProcedure,
		svc.GetDrawRound,
		opts...,
	)
	return "/draw.v1.private.DrawService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DrawServiceCreateDrawProcedure:
			drawServiceCreateDrawHandler.ServeHTTP(w, r)
		case DrawServiceGetDrawProcedure:
			drawServiceGetDrawHandler.ServeHTTP(w, r)
		case DrawServiceUpdateDrawProcedure:
			drawServiceUpdateDrawHandler.ServeHTTP(w, r)
		case DrawServiceDeleteDrawProcedure:
			drawServiceDeleteDrawHandler.ServeHTTP(w, r)
		case DrawServiceGetDrawRoundProcedure:
			drawServiceGetDrawRoundHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDrawServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDrawServiceHandler struct{}

func (UnimplementedDrawServiceHandler) CreateDraw(context.Context, *connect_go.Request[private.CreateDrawRequest]) (*connect_go.Response[private.CreateDrawResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("draw.v1.private.DrawService.CreateDraw is not implemented"))
}

func (UnimplementedDrawServiceHandler) GetDraw(context.Context, *connect_go.Request[private.GetDrawRequest]) (*connect_go.Response[private.GetDrawResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("draw.v1.private.DrawService.GetDraw is not implemented"))
}

func (UnimplementedDrawServiceHandler) UpdateDraw(context.Context, *connect_go.Request[private.UpdateDrawRequest]) (*connect_go.Response[private.UpdateDrawResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("draw.v1.private.DrawService.UpdateDraw is not implemented"))
}

func (UnimplementedDrawServiceHandler) DeleteDraw(context.Context, *connect_go.Request[private.DeleteDrawRequest]) (*connect_go.Response[private.DeleteDrawResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("draw.v1.private.DrawService.DeleteDraw is not implemented"))
}

func (UnimplementedDrawServiceHandler) GetDrawRound(context.Context, *connect_go.Request[private.GetDrawRoundRequest]) (*connect_go.Response[private.GetDrawRoundResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("draw.v1.private.DrawService.GetDrawRound is not implemented"))
}
