// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: draw/v1/private/draw.proto

package drawv1private

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	flexible_round_robin "github.com/keegancraigcruickshank/volley-api-connect/draw/v1/private/flexible-round-robin"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DrawType int32

const (
	DrawType_UNKNOWN              DrawType = 0
	DrawType_FLEXIBLE_ROUND_ROBIN DrawType = 1
)

// Enum value maps for DrawType.
var (
	DrawType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FLEXIBLE_ROUND_ROBIN",
	}
	DrawType_value = map[string]int32{
		"UNKNOWN":              0,
		"FLEXIBLE_ROUND_ROBIN": 1,
	}
)

func (x DrawType) Enum() *DrawType {
	p := new(DrawType)
	*p = x
	return p
}

func (x DrawType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrawType) Descriptor() protoreflect.EnumDescriptor {
	return file_draw_v1_private_draw_proto_enumTypes[0].Descriptor()
}

func (DrawType) Type() protoreflect.EnumType {
	return &file_draw_v1_private_draw_proto_enumTypes[0]
}

func (x DrawType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrawType.Descriptor instead.
func (DrawType) EnumDescriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{0}
}

type Draw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Modified *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	Type     int32                  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Draw) Reset() {
	*x = Draw{}
	mi := &file_draw_v1_private_draw_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Draw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Draw) ProtoMessage() {}

func (x *Draw) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Draw.ProtoReflect.Descriptor instead.
func (*Draw) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{0}
}

func (x *Draw) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Draw) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Draw) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *Draw) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type GetDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDrawRequest) Reset() {
	*x = GetDrawRequest{}
	mi := &file_draw_v1_private_draw_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrawRequest) ProtoMessage() {}

func (x *GetDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrawRequest.ProtoReflect.Descriptor instead.
func (*GetDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{1}
}

func (x *GetDrawRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Draw:
	//
	//	*GetDrawResponse_FlexibleRoundRobinDraw
	Draw isGetDrawResponse_Draw `protobuf_oneof:"draw"`
}

func (x *GetDrawResponse) Reset() {
	*x = GetDrawResponse{}
	mi := &file_draw_v1_private_draw_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrawResponse) ProtoMessage() {}

func (x *GetDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrawResponse.ProtoReflect.Descriptor instead.
func (*GetDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{2}
}

func (m *GetDrawResponse) GetDraw() isGetDrawResponse_Draw {
	if m != nil {
		return m.Draw
	}
	return nil
}

func (x *GetDrawResponse) GetFlexibleRoundRobinDraw() *flexible_round_robin.FlexibleRoundRobinDraw {
	if x, ok := x.GetDraw().(*GetDrawResponse_FlexibleRoundRobinDraw); ok {
		return x.FlexibleRoundRobinDraw
	}
	return nil
}

type isGetDrawResponse_Draw interface {
	isGetDrawResponse_Draw()
}

type GetDrawResponse_FlexibleRoundRobinDraw struct {
	FlexibleRoundRobinDraw *flexible_round_robin.FlexibleRoundRobinDraw `protobuf:"bytes,1,opt,name=flexible_round_robin_draw,json=flexibleRoundRobinDraw,proto3,oneof"`
}

func (*GetDrawResponse_FlexibleRoundRobinDraw) isGetDrawResponse_Draw() {}

type DeleteDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDrawRequest) Reset() {
	*x = DeleteDrawRequest{}
	mi := &file_draw_v1_private_draw_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDrawRequest) ProtoMessage() {}

func (x *DeleteDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDrawRequest.ProtoReflect.Descriptor instead.
func (*DeleteDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDrawRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDrawResponse) Reset() {
	*x = DeleteDrawResponse{}
	mi := &file_draw_v1_private_draw_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDrawResponse) ProtoMessage() {}

func (x *DeleteDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDrawResponse.ProtoReflect.Descriptor instead.
func (*DeleteDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{4}
}

type ListDrawsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *string `protobuf:"bytes,1,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Page     *int32  `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize *int32  `protobuf:"varint,3,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
}

func (x *ListDrawsRequest) Reset() {
	*x = ListDrawsRequest{}
	mi := &file_draw_v1_private_draw_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDrawsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDrawsRequest) ProtoMessage() {}

func (x *ListDrawsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDrawsRequest.ProtoReflect.Descriptor instead.
func (*ListDrawsRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{5}
}

func (x *ListDrawsRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *ListDrawsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListDrawsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type ListDrawsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw       []*Draw `protobuf:"bytes,1,rep,name=draw,proto3" json:"draw,omitempty"`
	TotalCount int32   `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *ListDrawsResponse) Reset() {
	*x = ListDrawsResponse{}
	mi := &file_draw_v1_private_draw_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDrawsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDrawsResponse) ProtoMessage() {}

func (x *ListDrawsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDrawsResponse.ProtoReflect.Descriptor instead.
func (*ListDrawsResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{6}
}

func (x *ListDrawsResponse) GetDraw() []*Draw {
	if x != nil {
		return x.Draw
	}
	return nil
}

func (x *ListDrawsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_draw_v1_private_draw_proto protoreflect.FileDescriptor

var file_draw_v1_private_draw_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x72, 0x61, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x72,
	0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f,
	0x64, 0x72, 0x61, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f,
	0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x2d, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef,
	0x01, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x61, 0x77, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x32, 0x14, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x61, 0x77, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x60, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x28, 0x92,
	0x41, 0x25, 0x32, 0x23, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x72, 0x61, 0x77, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x72, 0x61, 0x77, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x3c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x14, 0x32, 0x12, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x72, 0x61, 0x77, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbc,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x19, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e,
	0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f,
	0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x54, 0x68,
	0x65, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x16, 0x66,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69,
	0x6e, 0x44, 0x72, 0x61, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x22, 0x3f, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0x92, 0x41, 0x14, 0x32, 0x12, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x72, 0x61, 0x77, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x54,
	0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x72, 0x61, 0x77, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x72, 0x61, 0x77, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0x54, 0x68, 0x65, 0x20, 0x64, 0x72, 0x61, 0x77, 0x73, 0x52, 0x04, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x54, 0x68,
	0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x64, 0x72, 0x61, 0x77, 0x73, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x2a, 0x31, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x4c, 0x45, 0x58, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52,
	0x4f, 0x42, 0x49, 0x4e, 0x10, 0x01, 0x32, 0xd9, 0x1d, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xca, 0x01,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x77, 0x12, 0x1f, 0x2e, 0x64, 0x72, 0x61, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x61,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x92, 0x41,
	0x43, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x12, 0x0a, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x64,
	0x72, 0x61, 0x77, 0x1a, 0x0a, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x64, 0x72, 0x61, 0x77, 0x4a,
	0x11, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0a, 0x0a, 0x08, 0x54, 0x68, 0x65, 0x20, 0x64, 0x72,
	0x61, 0x77, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f,
	0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x77, 0x12, 0xd2, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x12, 0x22, 0x2e, 0x64, 0x72, 0x61, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7b, 0x92, 0x41, 0x3f, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x12, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x64, 0x72, 0x61, 0x77, 0x4a, 0x07, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x00, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22,
	0x2e, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x12,
	0xd3, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x73, 0x12, 0x21, 0x2e,
	0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x92, 0x41, 0x44, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x12,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x72, 0x61, 0x77, 0x73, 0x1a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x64, 0x72, 0x61, 0x77, 0x73, 0x4a, 0x12, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x0b,
	0x0a, 0x09, 0x54, 0x68, 0x65, 0x20, 0x64, 0x72, 0x61, 0x77, 0x73, 0x62, 0x10, 0x0a, 0x0e, 0x0a,
	0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x72, 0x61, 0x77, 0x73, 0x12, 0xbd, 0x03, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xff, 0x01, 0x92, 0x41, 0xb0, 0x01, 0x0a, 0x1b, 0x44, 0x72, 0x61, 0x77,
	0x20, 0x2d, 0x20, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x20, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x12, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x4a,
	0x37, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x30, 0x0a, 0x2e, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45,
	0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69,
	0x6e, 0x44, 0x72, 0x61, 0x77, 0x12, 0x9a, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44,
	0x72, 0x61, 0x77, 0x12, 0x49, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f,
	0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a,
	0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe5, 0x01, 0x92, 0x41, 0x99,
	0x01, 0x0a, 0x1b, 0x44, 0x72, 0x61, 0x77, 0x20, 0x2d, 0x20, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x20, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x12, 0x1f,
	0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x1a,
	0x1f, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77,
	0x4a, 0x26, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1f, 0x0a, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x66,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x3a, 0x01, 0x2a, 0x22, 0x3d, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61,
	0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x77, 0x12, 0x8d, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44,
	0x72, 0x61, 0x77, 0x12, 0x4c, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4d, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcf, 0x01, 0x92, 0x41, 0x80, 0x01, 0x0a, 0x1b, 0x44, 0x72, 0x61, 0x77, 0x20, 0x2d, 0x20,
	0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x52,
	0x6f, 0x62, 0x69, 0x6e, 0x12, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x1a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x4a, 0x07, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x00, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a,
	0x22, 0x40, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x77, 0x12, 0xc0, 0x03, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4e, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc, 0x01, 0x92, 0x41, 0xab, 0x01, 0x0a, 0x1b, 0x44,
	0x72, 0x61, 0x77, 0x20, 0x2d, 0x20, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x20, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x12, 0x25, 0x47, 0x65, 0x74, 0x20,
	0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x20, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x1a, 0x25, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c,
	0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72,
	0x61, 0x77, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x2c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x25, 0x0a, 0x23, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77,
	0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01,
	0x2a, 0x22, 0x42, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0xea, 0x03, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44,
	0x72, 0x61, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x54,
	0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x02, 0x92, 0x41,
	0xbd, 0x01, 0x0a, 0x1b, 0x44, 0x72, 0x61, 0x77, 0x20, 0x2d, 0x20, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x20, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x12,
	0x2b, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77,
	0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x2b, 0x47, 0x65,
	0x74, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x20, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4a, 0x32, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x2b, 0x0a, 0x29, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65,
	0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61,
	0x77, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x62, 0x10, 0x0a,
	0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x3a, 0x01, 0x2a, 0x22, 0x48, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f,
	0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0xd5, 0x03, 0x0a, 0x25, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x46, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfc, 0x01, 0x92, 0x41,
	0xa4, 0x01, 0x0a, 0x1b, 0x44, 0x72, 0x61, 0x77, 0x20, 0x2d, 0x20, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x20, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x12,
	0x34, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x20,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x34, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x20, 0x64, 0x72, 0x61, 0x77, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x07, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x00, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x22,
	0x49, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0xd5, 0x03, 0x0a, 0x25, 0x53,
	0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x64, 0x72,
	0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72,
	0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x46,
	0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xfc, 0x01, 0x92, 0x41, 0xa4, 0x01, 0x0a, 0x1b, 0x44, 0x72, 0x61, 0x77,
	0x20, 0x2d, 0x20, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x20, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x12, 0x34, 0x53, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x66, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x20, 0x64, 0x72, 0x61, 0x77, 0x20, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x34, 0x53,
	0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x20, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x20, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x61, 0x77, 0x20, 0x66, 0x69, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x4a, 0x07, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x00, 0x62, 0x10, 0x0a, 0x0e,
	0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x22, 0x49, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74,
	0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x65, 0x65, 0x67, 0x61, 0x6e, 0x63, 0x72, 0x61, 0x69, 0x67, 0x63, 0x72, 0x75, 0x69,
	0x63, 0x6b, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x6f, 0x6c, 0x6c, 0x65, 0x79, 0x2d, 0x61,
	0x70, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3b, 0x64, 0x72, 0x61, 0x77, 0x76,
	0x31, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_draw_v1_private_draw_proto_rawDescOnce sync.Once
	file_draw_v1_private_draw_proto_rawDescData = file_draw_v1_private_draw_proto_rawDesc
)

func file_draw_v1_private_draw_proto_rawDescGZIP() []byte {
	file_draw_v1_private_draw_proto_rawDescOnce.Do(func() {
		file_draw_v1_private_draw_proto_rawDescData = protoimpl.X.CompressGZIP(file_draw_v1_private_draw_proto_rawDescData)
	})
	return file_draw_v1_private_draw_proto_rawDescData
}

var file_draw_v1_private_draw_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_draw_v1_private_draw_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_draw_v1_private_draw_proto_goTypes = []any{
	(DrawType)(0),                                       // 0: draw.v1.private.DrawType
	(*Draw)(nil),                                        // 1: draw.v1.private.Draw
	(*GetDrawRequest)(nil),                              // 2: draw.v1.private.GetDrawRequest
	(*GetDrawResponse)(nil),                             // 3: draw.v1.private.GetDrawResponse
	(*DeleteDrawRequest)(nil),                           // 4: draw.v1.private.DeleteDrawRequest
	(*DeleteDrawResponse)(nil),                          // 5: draw.v1.private.DeleteDrawResponse
	(*ListDrawsRequest)(nil),                            // 6: draw.v1.private.ListDrawsRequest
	(*ListDrawsResponse)(nil),                           // 7: draw.v1.private.ListDrawsResponse
	(*timestamppb.Timestamp)(nil),                       // 8: google.protobuf.Timestamp
	(*flexible_round_robin.FlexibleRoundRobinDraw)(nil), // 9: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw
	(*flexible_round_robin.CreateFlexibleRoundRobinDrawRequest)(nil),           // 10: draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawRequest
	(*flexible_round_robin.GetFlexibleRoundRobinDrawRequest)(nil),              // 11: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRequest
	(*flexible_round_robin.UpdateFlexibleRoundRobinDrawRequest)(nil),           // 12: draw.v1.private.draw.flexibleRoundRobin.UpdateFlexibleRoundRobinDrawRequest
	(*flexible_round_robin.GetFlexibleRoundRobinDrawRoundRequest)(nil),         // 13: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRoundRequest
	(*flexible_round_robin.GetFlexibleRoundRobinDrawLeaderboardRequest)(nil),   // 14: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawLeaderboardRequest
	(*flexible_round_robin.FlexibleRoundRobinDrawChangeRoundDateRequest)(nil),  // 15: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawChangeRoundDateRequest
	(*flexible_round_robin.SetFlexibleRoundRobinDrawFixtureScoreRequest)(nil),  // 16: draw.v1.private.draw.flexibleRoundRobin.SetFlexibleRoundRobinDrawFixtureScoreRequest
	(*flexible_round_robin.CreateFlexibleRoundRobinDrawResponse)(nil),          // 17: draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawResponse
	(*flexible_round_robin.GetFlexibleRoundRobinDrawResponse)(nil),             // 18: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawResponse
	(*flexible_round_robin.UpdateFlexibleRoundRobinDrawResponse)(nil),          // 19: draw.v1.private.draw.flexibleRoundRobin.UpdateFlexibleRoundRobinDrawResponse
	(*flexible_round_robin.GetFlexibleRoundRobinDrawRoundResponse)(nil),        // 20: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRoundResponse
	(*flexible_round_robin.GetFlexibleRoundRobinDrawLeaderboardResponse)(nil),  // 21: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawLeaderboardResponse
	(*flexible_round_robin.FlexibleRoundRobinDrawChangeRoundDateResponse)(nil), // 22: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawChangeRoundDateResponse
	(*flexible_round_robin.SetFlexibleRoundRobinDrawFixtureScoreResponse)(nil), // 23: draw.v1.private.draw.flexibleRoundRobin.SetFlexibleRoundRobinDrawFixtureScoreResponse
}
var file_draw_v1_private_draw_proto_depIdxs = []int32{
	8,  // 0: draw.v1.private.Draw.modified:type_name -> google.protobuf.Timestamp
	9,  // 1: draw.v1.private.GetDrawResponse.flexible_round_robin_draw:type_name -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw
	1,  // 2: draw.v1.private.ListDrawsResponse.draw:type_name -> draw.v1.private.Draw
	2,  // 3: draw.v1.private.PrivateDrawService.GetDraw:input_type -> draw.v1.private.GetDrawRequest
	4,  // 4: draw.v1.private.PrivateDrawService.DeleteDraw:input_type -> draw.v1.private.DeleteDrawRequest
	6,  // 5: draw.v1.private.PrivateDrawService.ListDraws:input_type -> draw.v1.private.ListDrawsRequest
	10, // 6: draw.v1.private.PrivateDrawService.CreateFlexibleRoundRobinDraw:input_type -> draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawRequest
	11, // 7: draw.v1.private.PrivateDrawService.GetFlexibleRoundRobinDraw:input_type -> draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRequest
	12, // 8: draw.v1.private.PrivateDrawService.UpdateFlexibleRoundRobinDraw:input_type -> draw.v1.private.draw.flexibleRoundRobin.UpdateFlexibleRoundRobinDrawRequest
	13, // 9: draw.v1.private.PrivateDrawService.GetFlexibleRoundRobinDrawRound:input_type -> draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRoundRequest
	14, // 10: draw.v1.private.PrivateDrawService.GetFlexibleRoundRobinDrawLeaderboard:input_type -> draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawLeaderboardRequest
	15, // 11: draw.v1.private.PrivateDrawService.FlexibleRoundRobinDrawChangeRoundDate:input_type -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawChangeRoundDateRequest
	16, // 12: draw.v1.private.PrivateDrawService.SetFlexibleRoundRobinDrawFixtureScore:input_type -> draw.v1.private.draw.flexibleRoundRobin.SetFlexibleRoundRobinDrawFixtureScoreRequest
	3,  // 13: draw.v1.private.PrivateDrawService.GetDraw:output_type -> draw.v1.private.GetDrawResponse
	5,  // 14: draw.v1.private.PrivateDrawService.DeleteDraw:output_type -> draw.v1.private.DeleteDrawResponse
	7,  // 15: draw.v1.private.PrivateDrawService.ListDraws:output_type -> draw.v1.private.ListDrawsResponse
	17, // 16: draw.v1.private.PrivateDrawService.CreateFlexibleRoundRobinDraw:output_type -> draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawResponse
	18, // 17: draw.v1.private.PrivateDrawService.GetFlexibleRoundRobinDraw:output_type -> draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawResponse
	19, // 18: draw.v1.private.PrivateDrawService.UpdateFlexibleRoundRobinDraw:output_type -> draw.v1.private.draw.flexibleRoundRobin.UpdateFlexibleRoundRobinDrawResponse
	20, // 19: draw.v1.private.PrivateDrawService.GetFlexibleRoundRobinDrawRound:output_type -> draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRoundResponse
	21, // 20: draw.v1.private.PrivateDrawService.GetFlexibleRoundRobinDrawLeaderboard:output_type -> draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawLeaderboardResponse
	22, // 21: draw.v1.private.PrivateDrawService.FlexibleRoundRobinDrawChangeRoundDate:output_type -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawChangeRoundDateResponse
	23, // 22: draw.v1.private.PrivateDrawService.SetFlexibleRoundRobinDrawFixtureScore:output_type -> draw.v1.private.draw.flexibleRoundRobin.SetFlexibleRoundRobinDrawFixtureScoreResponse
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_draw_v1_private_draw_proto_init() }
func file_draw_v1_private_draw_proto_init() {
	if File_draw_v1_private_draw_proto != nil {
		return
	}
	file_draw_v1_private_draw_proto_msgTypes[2].OneofWrappers = []any{
		(*GetDrawResponse_FlexibleRoundRobinDraw)(nil),
	}
	file_draw_v1_private_draw_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_draw_v1_private_draw_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_draw_v1_private_draw_proto_goTypes,
		DependencyIndexes: file_draw_v1_private_draw_proto_depIdxs,
		EnumInfos:         file_draw_v1_private_draw_proto_enumTypes,
		MessageInfos:      file_draw_v1_private_draw_proto_msgTypes,
	}.Build()
	File_draw_v1_private_draw_proto = out.File
	file_draw_v1_private_draw_proto_rawDesc = nil
	file_draw_v1_private_draw_proto_goTypes = nil
	file_draw_v1_private_draw_proto_depIdxs = nil
}
