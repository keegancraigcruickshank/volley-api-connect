// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: draw/v1/private/draw.proto

package drawv1private

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DrawType int32

const (
	DrawType_UNKNOWN              DrawType = 0
	DrawType_FLEXIBLE_ROUND_ROBIN DrawType = 1
)

// Enum value maps for DrawType.
var (
	DrawType_name = map[int32]string{
		0: "UNKNOWN",
		1: "FLEXIBLE_ROUND_ROBIN",
	}
	DrawType_value = map[string]int32{
		"UNKNOWN":              0,
		"FLEXIBLE_ROUND_ROBIN": 1,
	}
)

func (x DrawType) Enum() *DrawType {
	p := new(DrawType)
	*p = x
	return p
}

func (x DrawType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrawType) Descriptor() protoreflect.EnumDescriptor {
	return file_draw_v1_private_draw_proto_enumTypes[0].Descriptor()
}

func (DrawType) Type() protoreflect.EnumType {
	return &file_draw_v1_private_draw_proto_enumTypes[0]
}

func (x DrawType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrawType.Descriptor instead.
func (DrawType) EnumDescriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{0}
}

type Frequency int32

const (
	Frequency_FREQUENCY_UNSPECIFIED Frequency = 0
	Frequency_FREQUENCY_ASAP        Frequency = 1
	Frequency_FREQUENCY_DAILY       Frequency = 2
	Frequency_FREQUENCY_WEEKLY      Frequency = 3
	Frequency_FREQUENCY_MONTHLY     Frequency = 4
	Frequency_FREQUENCY_YEARLY      Frequency = 5
)

// Enum value maps for Frequency.
var (
	Frequency_name = map[int32]string{
		0: "FREQUENCY_UNSPECIFIED",
		1: "FREQUENCY_ASAP",
		2: "FREQUENCY_DAILY",
		3: "FREQUENCY_WEEKLY",
		4: "FREQUENCY_MONTHLY",
		5: "FREQUENCY_YEARLY",
	}
	Frequency_value = map[string]int32{
		"FREQUENCY_UNSPECIFIED": 0,
		"FREQUENCY_ASAP":        1,
		"FREQUENCY_DAILY":       2,
		"FREQUENCY_WEEKLY":      3,
		"FREQUENCY_MONTHLY":     4,
		"FREQUENCY_YEARLY":      5,
	}
)

func (x Frequency) Enum() *Frequency {
	p := new(Frequency)
	*p = x
	return p
}

func (x Frequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Frequency) Descriptor() protoreflect.EnumDescriptor {
	return file_draw_v1_private_draw_proto_enumTypes[1].Descriptor()
}

func (Frequency) Type() protoreflect.EnumType {
	return &file_draw_v1_private_draw_proto_enumTypes[1]
}

func (x Frequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Frequency.Descriptor instead.
func (Frequency) EnumDescriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{1}
}

type RoundStatus int32

const (
	RoundStatus_ROUND_STATUS_UNSPECIFIED RoundStatus = 0
	RoundStatus_ROUND_STATUS_PREVIEW     RoundStatus = 1
	RoundStatus_ROUND_STATUS_DRAFT       RoundStatus = 2
	RoundStatus_ROUND_STATUS_PUBLISHED   RoundStatus = 3
)

// Enum value maps for RoundStatus.
var (
	RoundStatus_name = map[int32]string{
		0: "ROUND_STATUS_UNSPECIFIED",
		1: "ROUND_STATUS_PREVIEW",
		2: "ROUND_STATUS_DRAFT",
		3: "ROUND_STATUS_PUBLISHED",
	}
	RoundStatus_value = map[string]int32{
		"ROUND_STATUS_UNSPECIFIED": 0,
		"ROUND_STATUS_PREVIEW":     1,
		"ROUND_STATUS_DRAFT":       2,
		"ROUND_STATUS_PUBLISHED":   3,
	}
)

func (x RoundStatus) Enum() *RoundStatus {
	p := new(RoundStatus)
	*p = x
	return p
}

func (x RoundStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoundStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_draw_v1_private_draw_proto_enumTypes[2].Descriptor()
}

func (RoundStatus) Type() protoreflect.EnumType {
	return &file_draw_v1_private_draw_proto_enumTypes[2]
}

func (x RoundStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoundStatus.Descriptor instead.
func (RoundStatus) EnumDescriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{2}
}

type Points struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Win     int32 `protobuf:"varint,1,opt,name=win,proto3" json:"win,omitempty"`
	Tie     int32 `protobuf:"varint,2,opt,name=tie,proto3" json:"tie,omitempty"`
	Loss    int32 `protobuf:"varint,3,opt,name=loss,proto3" json:"loss,omitempty"`
	Forfeit int32 `protobuf:"varint,4,opt,name=forfeit,proto3" json:"forfeit,omitempty"`
}

func (x *Points) Reset() {
	*x = Points{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Points) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Points) ProtoMessage() {}

func (x *Points) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Points.ProtoReflect.Descriptor instead.
func (*Points) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{0}
}

func (x *Points) GetWin() int32 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *Points) GetTie() int32 {
	if x != nil {
		return x.Tie
	}
	return 0
}

func (x *Points) GetLoss() int32 {
	if x != nil {
		return x.Loss
	}
	return 0
}

func (x *Points) GetForfeit() int32 {
	if x != nil {
		return x.Forfeit
	}
	return 0
}

type FlexibleRoundRobinDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Modified   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	DivisionId string                 `protobuf:"bytes,4,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
}

func (x *FlexibleRoundRobinDraw) Reset() {
	*x = FlexibleRoundRobinDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexibleRoundRobinDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexibleRoundRobinDraw) ProtoMessage() {}

func (x *FlexibleRoundRobinDraw) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexibleRoundRobinDraw.ProtoReflect.Descriptor instead.
func (*FlexibleRoundRobinDraw) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{1}
}

func (x *FlexibleRoundRobinDraw) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlexibleRoundRobinDraw) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlexibleRoundRobinDraw) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *FlexibleRoundRobinDraw) GetDivisionId() string {
	if x != nil {
		return x.DivisionId
	}
	return ""
}

type FlexibleRoundRobinMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DrawId       string                 `protobuf:"bytes,2,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Round        int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	TeamOne      string                 `protobuf:"bytes,4,opt,name=team_one,json=teamOne,proto3" json:"team_one,omitempty"`
	TeamTwo      string                 `protobuf:"bytes,5,opt,name=team_two,json=teamTwo,proto3" json:"team_two,omitempty"`
	TeamOneScore int32                  `protobuf:"varint,6,opt,name=team_one_score,json=teamOneScore,proto3" json:"team_one_score,omitempty"`
	TeamTwoScore int32                  `protobuf:"varint,7,opt,name=team_two_score,json=teamTwoScore,proto3" json:"team_two_score,omitempty"`
	Modified     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *FlexibleRoundRobinMatch) Reset() {
	*x = FlexibleRoundRobinMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexibleRoundRobinMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexibleRoundRobinMatch) ProtoMessage() {}

func (x *FlexibleRoundRobinMatch) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexibleRoundRobinMatch.ProtoReflect.Descriptor instead.
func (*FlexibleRoundRobinMatch) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{2}
}

func (x *FlexibleRoundRobinMatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *FlexibleRoundRobinMatch) GetTeamOne() string {
	if x != nil {
		return x.TeamOne
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetTeamTwo() string {
	if x != nil {
		return x.TeamTwo
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetTeamOneScore() int32 {
	if x != nil {
		return x.TeamOneScore
	}
	return 0
}

func (x *FlexibleRoundRobinMatch) GetTeamTwoScore() int32 {
	if x != nil {
		return x.TeamTwoScore
	}
	return 0
}

func (x *FlexibleRoundRobinMatch) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

type Draw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Modified *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	Type     int32                  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Draw) Reset() {
	*x = Draw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Draw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Draw) ProtoMessage() {}

func (x *Draw) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Draw.ProtoReflect.Descriptor instead.
func (*Draw) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{3}
}

func (x *Draw) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Draw) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Draw) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *Draw) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type GetDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDrawRequest) Reset() {
	*x = GetDrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrawRequest) ProtoMessage() {}

func (x *GetDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrawRequest.ProtoReflect.Descriptor instead.
func (*GetDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{4}
}

func (x *GetDrawRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Draw:
	//
	//	*GetDrawResponse_FlexibleRoundRobinDraw
	Draw isGetDrawResponse_Draw `protobuf_oneof:"draw"`
}

func (x *GetDrawResponse) Reset() {
	*x = GetDrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrawResponse) ProtoMessage() {}

func (x *GetDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrawResponse.ProtoReflect.Descriptor instead.
func (*GetDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{5}
}

func (m *GetDrawResponse) GetDraw() isGetDrawResponse_Draw {
	if m != nil {
		return m.Draw
	}
	return nil
}

func (x *GetDrawResponse) GetFlexibleRoundRobinDraw() *FlexibleRoundRobinDraw {
	if x, ok := x.GetDraw().(*GetDrawResponse_FlexibleRoundRobinDraw); ok {
		return x.FlexibleRoundRobinDraw
	}
	return nil
}

type isGetDrawResponse_Draw interface {
	isGetDrawResponse_Draw()
}

type GetDrawResponse_FlexibleRoundRobinDraw struct {
	FlexibleRoundRobinDraw *FlexibleRoundRobinDraw `protobuf:"bytes,1,opt,name=flexible_round_robin_draw,json=flexibleRoundRobinDraw,proto3,oneof"`
}

func (*GetDrawResponse_FlexibleRoundRobinDraw) isGetDrawResponse_Draw() {}

type DeleteDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDrawRequest) Reset() {
	*x = DeleteDrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDrawRequest) ProtoMessage() {}

func (x *DeleteDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDrawRequest.ProtoReflect.Descriptor instead.
func (*DeleteDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDrawRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDrawResponse) Reset() {
	*x = DeleteDrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDrawResponse) ProtoMessage() {}

func (x *DeleteDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDrawResponse.ProtoReflect.Descriptor instead.
func (*DeleteDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDrawResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateFlexibleRoundRobinDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DivisionId string                 `protobuf:"bytes,2,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	Frequency  Frequency              `protobuf:"varint,4,opt,name=frequency,proto3,enum=draw.v1.private.Frequency" json:"frequency,omitempty"`
	Points     *Points                `protobuf:"bytes,5,opt,name=points,proto3" json:"points,omitempty"`
	Rounds     int32                  `protobuf:"varint,6,opt,name=rounds,proto3" json:"rounds,omitempty"`
}

func (x *CreateFlexibleRoundRobinDrawRequest) Reset() {
	*x = CreateFlexibleRoundRobinDrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlexibleRoundRobinDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlexibleRoundRobinDrawRequest) ProtoMessage() {}

func (x *CreateFlexibleRoundRobinDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlexibleRoundRobinDrawRequest.ProtoReflect.Descriptor instead.
func (*CreateFlexibleRoundRobinDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{8}
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetDivisionId() string {
	if x != nil {
		return x.DivisionId
	}
	return ""
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetFrequency() Frequency {
	if x != nil {
		return x.Frequency
	}
	return Frequency_FREQUENCY_UNSPECIFIED
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetPoints() *Points {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetRounds() int32 {
	if x != nil {
		return x.Rounds
	}
	return 0
}

type CreateFlexibleRoundRobinDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw *FlexibleRoundRobinDraw `protobuf:"bytes,1,opt,name=draw,proto3" json:"draw,omitempty"`
}

func (x *CreateFlexibleRoundRobinDrawResponse) Reset() {
	*x = CreateFlexibleRoundRobinDrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlexibleRoundRobinDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlexibleRoundRobinDrawResponse) ProtoMessage() {}

func (x *CreateFlexibleRoundRobinDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlexibleRoundRobinDrawResponse.ProtoReflect.Descriptor instead.
func (*CreateFlexibleRoundRobinDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{9}
}

func (x *CreateFlexibleRoundRobinDrawResponse) GetDraw() *FlexibleRoundRobinDraw {
	if x != nil {
		return x.Draw
	}
	return nil
}

type UpdateFlexibleRoundRobinDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Teams []string `protobuf:"bytes,3,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *UpdateFlexibleRoundRobinDrawRequest) Reset() {
	*x = UpdateFlexibleRoundRobinDrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlexibleRoundRobinDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlexibleRoundRobinDrawRequest) ProtoMessage() {}

func (x *UpdateFlexibleRoundRobinDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlexibleRoundRobinDrawRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlexibleRoundRobinDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateFlexibleRoundRobinDrawRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFlexibleRoundRobinDrawRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFlexibleRoundRobinDrawRequest) GetTeams() []string {
	if x != nil {
		return x.Teams
	}
	return nil
}

type UpdateFlexibleRoundRobinDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw *FlexibleRoundRobinDraw `protobuf:"bytes,1,opt,name=draw,proto3" json:"draw,omitempty"`
}

func (x *UpdateFlexibleRoundRobinDrawResponse) Reset() {
	*x = UpdateFlexibleRoundRobinDrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlexibleRoundRobinDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlexibleRoundRobinDrawResponse) ProtoMessage() {}

func (x *UpdateFlexibleRoundRobinDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlexibleRoundRobinDrawResponse.ProtoReflect.Descriptor instead.
func (*UpdateFlexibleRoundRobinDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateFlexibleRoundRobinDrawResponse) GetDraw() *FlexibleRoundRobinDraw {
	if x != nil {
		return x.Draw
	}
	return nil
}

type GetFlexibleRoundRobinDrawRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId string `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Round  int32  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *GetFlexibleRoundRobinDrawRoundRequest) Reset() {
	*x = GetFlexibleRoundRobinDrawRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlexibleRoundRobinDrawRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlexibleRoundRobinDrawRoundRequest) ProtoMessage() {}

func (x *GetFlexibleRoundRobinDrawRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlexibleRoundRobinDrawRoundRequest.ProtoReflect.Descriptor instead.
func (*GetFlexibleRoundRobinDrawRoundRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{12}
}

func (x *GetFlexibleRoundRobinDrawRoundRequest) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *GetFlexibleRoundRobinDrawRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type GetFlexibleRoundRobinDrawRoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId  string                     `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Round   int32                      `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Status  RoundStatus                `protobuf:"varint,3,opt,name=status,proto3,enum=draw.v1.private.RoundStatus" json:"status,omitempty"`
	Matches []*FlexibleRoundRobinMatch `protobuf:"bytes,4,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) Reset() {
	*x = GetFlexibleRoundRobinDrawRoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlexibleRoundRobinDrawRoundResponse) ProtoMessage() {}

func (x *GetFlexibleRoundRobinDrawRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlexibleRoundRobinDrawRoundResponse.ProtoReflect.Descriptor instead.
func (*GetFlexibleRoundRobinDrawRoundResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{13}
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) GetStatus() RoundStatus {
	if x != nil {
		return x.Status
	}
	return RoundStatus_ROUND_STATUS_UNSPECIFIED
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) GetMatches() []*FlexibleRoundRobinMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

type ListDrawsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *string `protobuf:"bytes,1,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Page     *int32  `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize *int32  `protobuf:"varint,3,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
}

func (x *ListDrawsRequest) Reset() {
	*x = ListDrawsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDrawsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDrawsRequest) ProtoMessage() {}

func (x *ListDrawsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDrawsRequest.ProtoReflect.Descriptor instead.
func (*ListDrawsRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{14}
}

func (x *ListDrawsRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *ListDrawsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListDrawsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type ListDrawsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw       []*Draw `protobuf:"bytes,1,rep,name=draw,proto3" json:"draw,omitempty"`
	TotalCount int32   `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *ListDrawsResponse) Reset() {
	*x = ListDrawsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_draw_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDrawsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDrawsResponse) ProtoMessage() {}

func (x *ListDrawsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_draw_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDrawsResponse.ProtoReflect.Descriptor instead.
func (*ListDrawsResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_draw_proto_rawDescGZIP(), []int{15}
}

func (x *ListDrawsResponse) GetDraw() []*Draw {
	if x != nil {
		return x.Draw
	}
	return nil
}

func (x *ListDrawsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_draw_v1_private_draw_proto protoreflect.FileDescriptor

var file_draw_v1_private_draw_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x72, 0x61, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x72,
	0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a,
	0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x46,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69,
	0x6e, 0x44, 0x72, 0x61, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x17, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x77, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x77, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x77, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x7f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x19, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x5f, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77,
	0x48, 0x00, 0x52, 0x16, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x72,
	0x61, 0x77, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xac, 0x02,
	0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x63, 0x0a, 0x24,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x04, 0x64, 0x72, 0x61,
	0x77, 0x22, 0x5f, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x22, 0x63, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61,
	0x77, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x22, 0x56, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e,
	0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0xd1, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61,
	0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x61, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x42, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5e, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x31, 0x0a,
	0x08, 0x44, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c, 0x45, 0x58, 0x49, 0x42,
	0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x01,
	0x2a, 0x92, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19,
	0x0a, 0x15, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x53, 0x41, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x59, 0x45, 0x41,
	0x52, 0x4c, 0x59, 0x10, 0x05, 0x2a, 0x79, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03,
	0x32, 0xbd, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x44, 0x72,
	0x61, 0x77, 0x12, 0x1f, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x72, 0x61, 0x77, 0x12, 0x22, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x12, 0x34, 0x2e,
	0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x12, 0x34, 0x2e, 0x64, 0x72,
	0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x36, 0x2e, 0x64, 0x72,
	0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f,
	0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x73, 0x12, 0x21, 0x2e, 0x64, 0x72, 0x61, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x72, 0x61, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x65, 0x65, 0x67, 0x61, 0x6e, 0x63, 0x72, 0x61, 0x69, 0x67, 0x63, 0x72, 0x75, 0x69, 0x63, 0x6b,
	0x73, 0x68, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x6f, 0x6c, 0x6c, 0x65, 0x79, 0x2d, 0x61, 0x70, 0x69,
	0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3b, 0x64, 0x72, 0x61, 0x77, 0x76, 0x31, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_draw_v1_private_draw_proto_rawDescOnce sync.Once
	file_draw_v1_private_draw_proto_rawDescData = file_draw_v1_private_draw_proto_rawDesc
)

func file_draw_v1_private_draw_proto_rawDescGZIP() []byte {
	file_draw_v1_private_draw_proto_rawDescOnce.Do(func() {
		file_draw_v1_private_draw_proto_rawDescData = protoimpl.X.CompressGZIP(file_draw_v1_private_draw_proto_rawDescData)
	})
	return file_draw_v1_private_draw_proto_rawDescData
}

var file_draw_v1_private_draw_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_draw_v1_private_draw_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_draw_v1_private_draw_proto_goTypes = []interface{}{
	(DrawType)(0),                                  // 0: draw.v1.private.DrawType
	(Frequency)(0),                                 // 1: draw.v1.private.Frequency
	(RoundStatus)(0),                               // 2: draw.v1.private.RoundStatus
	(*Points)(nil),                                 // 3: draw.v1.private.Points
	(*FlexibleRoundRobinDraw)(nil),                 // 4: draw.v1.private.FlexibleRoundRobinDraw
	(*FlexibleRoundRobinMatch)(nil),                // 5: draw.v1.private.FlexibleRoundRobinMatch
	(*Draw)(nil),                                   // 6: draw.v1.private.Draw
	(*GetDrawRequest)(nil),                         // 7: draw.v1.private.GetDrawRequest
	(*GetDrawResponse)(nil),                        // 8: draw.v1.private.GetDrawResponse
	(*DeleteDrawRequest)(nil),                      // 9: draw.v1.private.DeleteDrawRequest
	(*DeleteDrawResponse)(nil),                     // 10: draw.v1.private.DeleteDrawResponse
	(*CreateFlexibleRoundRobinDrawRequest)(nil),    // 11: draw.v1.private.CreateFlexibleRoundRobinDrawRequest
	(*CreateFlexibleRoundRobinDrawResponse)(nil),   // 12: draw.v1.private.CreateFlexibleRoundRobinDrawResponse
	(*UpdateFlexibleRoundRobinDrawRequest)(nil),    // 13: draw.v1.private.UpdateFlexibleRoundRobinDrawRequest
	(*UpdateFlexibleRoundRobinDrawResponse)(nil),   // 14: draw.v1.private.UpdateFlexibleRoundRobinDrawResponse
	(*GetFlexibleRoundRobinDrawRoundRequest)(nil),  // 15: draw.v1.private.GetFlexibleRoundRobinDrawRoundRequest
	(*GetFlexibleRoundRobinDrawRoundResponse)(nil), // 16: draw.v1.private.GetFlexibleRoundRobinDrawRoundResponse
	(*ListDrawsRequest)(nil),                       // 17: draw.v1.private.ListDrawsRequest
	(*ListDrawsResponse)(nil),                      // 18: draw.v1.private.ListDrawsResponse
	(*timestamppb.Timestamp)(nil),                  // 19: google.protobuf.Timestamp
}
var file_draw_v1_private_draw_proto_depIdxs = []int32{
	19, // 0: draw.v1.private.FlexibleRoundRobinDraw.modified:type_name -> google.protobuf.Timestamp
	19, // 1: draw.v1.private.FlexibleRoundRobinMatch.modified:type_name -> google.protobuf.Timestamp
	19, // 2: draw.v1.private.Draw.modified:type_name -> google.protobuf.Timestamp
	4,  // 3: draw.v1.private.GetDrawResponse.flexible_round_robin_draw:type_name -> draw.v1.private.FlexibleRoundRobinDraw
	19, // 4: draw.v1.private.CreateFlexibleRoundRobinDrawRequest.start_date:type_name -> google.protobuf.Timestamp
	1,  // 5: draw.v1.private.CreateFlexibleRoundRobinDrawRequest.frequency:type_name -> draw.v1.private.Frequency
	3,  // 6: draw.v1.private.CreateFlexibleRoundRobinDrawRequest.points:type_name -> draw.v1.private.Points
	4,  // 7: draw.v1.private.CreateFlexibleRoundRobinDrawResponse.draw:type_name -> draw.v1.private.FlexibleRoundRobinDraw
	4,  // 8: draw.v1.private.UpdateFlexibleRoundRobinDrawResponse.draw:type_name -> draw.v1.private.FlexibleRoundRobinDraw
	2,  // 9: draw.v1.private.GetFlexibleRoundRobinDrawRoundResponse.status:type_name -> draw.v1.private.RoundStatus
	5,  // 10: draw.v1.private.GetFlexibleRoundRobinDrawRoundResponse.matches:type_name -> draw.v1.private.FlexibleRoundRobinMatch
	6,  // 11: draw.v1.private.ListDrawsResponse.draw:type_name -> draw.v1.private.Draw
	7,  // 12: draw.v1.private.PrivateDrawService.GetDraw:input_type -> draw.v1.private.GetDrawRequest
	9,  // 13: draw.v1.private.PrivateDrawService.DeleteDraw:input_type -> draw.v1.private.DeleteDrawRequest
	11, // 14: draw.v1.private.PrivateDrawService.CreateFlexibleRoundRobinDraw:input_type -> draw.v1.private.CreateFlexibleRoundRobinDrawRequest
	13, // 15: draw.v1.private.PrivateDrawService.UpdateFlexibleRoundRobinDraw:input_type -> draw.v1.private.UpdateFlexibleRoundRobinDrawRequest
	15, // 16: draw.v1.private.PrivateDrawService.GetFlexibleRoundRobinDrawRound:input_type -> draw.v1.private.GetFlexibleRoundRobinDrawRoundRequest
	17, // 17: draw.v1.private.PrivateDrawService.ListDraws:input_type -> draw.v1.private.ListDrawsRequest
	8,  // 18: draw.v1.private.PrivateDrawService.GetDraw:output_type -> draw.v1.private.GetDrawResponse
	10, // 19: draw.v1.private.PrivateDrawService.DeleteDraw:output_type -> draw.v1.private.DeleteDrawResponse
	12, // 20: draw.v1.private.PrivateDrawService.CreateFlexibleRoundRobinDraw:output_type -> draw.v1.private.CreateFlexibleRoundRobinDrawResponse
	14, // 21: draw.v1.private.PrivateDrawService.UpdateFlexibleRoundRobinDraw:output_type -> draw.v1.private.UpdateFlexibleRoundRobinDrawResponse
	16, // 22: draw.v1.private.PrivateDrawService.GetFlexibleRoundRobinDrawRound:output_type -> draw.v1.private.GetFlexibleRoundRobinDrawRoundResponse
	18, // 23: draw.v1.private.PrivateDrawService.ListDraws:output_type -> draw.v1.private.ListDrawsResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_draw_v1_private_draw_proto_init() }
func file_draw_v1_private_draw_proto_init() {
	if File_draw_v1_private_draw_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_draw_v1_private_draw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Points); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlexibleRoundRobinDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlexibleRoundRobinMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Draw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlexibleRoundRobinDrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlexibleRoundRobinDrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlexibleRoundRobinDrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlexibleRoundRobinDrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlexibleRoundRobinDrawRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlexibleRoundRobinDrawRoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDrawsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_draw_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDrawsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_draw_v1_private_draw_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetDrawResponse_FlexibleRoundRobinDraw)(nil),
	}
	file_draw_v1_private_draw_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_draw_v1_private_draw_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_draw_v1_private_draw_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_draw_v1_private_draw_proto_goTypes,
		DependencyIndexes: file_draw_v1_private_draw_proto_depIdxs,
		EnumInfos:         file_draw_v1_private_draw_proto_enumTypes,
		MessageInfos:      file_draw_v1_private_draw_proto_msgTypes,
	}.Build()
	File_draw_v1_private_draw_proto = out.File
	file_draw_v1_private_draw_proto_rawDesc = nil
	file_draw_v1_private_draw_proto_goTypes = nil
	file_draw_v1_private_draw_proto_depIdxs = nil
}
