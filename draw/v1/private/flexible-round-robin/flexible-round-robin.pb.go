// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: draw/v1/private/flexible-round-robin/flexible-round-robin.proto

package drawv1privateflexibleroundrobin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Frequency int32

const (
	Frequency_FREQUENCY_UNSPECIFIED Frequency = 0
	Frequency_FREQUENCY_ASAP        Frequency = 1
	Frequency_FREQUENCY_DAILY       Frequency = 2
	Frequency_FREQUENCY_WEEKLY      Frequency = 3
	Frequency_FREQUENCY_MONTHLY     Frequency = 4
	Frequency_FREQUENCY_YEARLY      Frequency = 5
)

// Enum value maps for Frequency.
var (
	Frequency_name = map[int32]string{
		0: "FREQUENCY_UNSPECIFIED",
		1: "FREQUENCY_ASAP",
		2: "FREQUENCY_DAILY",
		3: "FREQUENCY_WEEKLY",
		4: "FREQUENCY_MONTHLY",
		5: "FREQUENCY_YEARLY",
	}
	Frequency_value = map[string]int32{
		"FREQUENCY_UNSPECIFIED": 0,
		"FREQUENCY_ASAP":        1,
		"FREQUENCY_DAILY":       2,
		"FREQUENCY_WEEKLY":      3,
		"FREQUENCY_MONTHLY":     4,
		"FREQUENCY_YEARLY":      5,
	}
)

func (x Frequency) Enum() *Frequency {
	p := new(Frequency)
	*p = x
	return p
}

func (x Frequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Frequency) Descriptor() protoreflect.EnumDescriptor {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_enumTypes[0].Descriptor()
}

func (Frequency) Type() protoreflect.EnumType {
	return &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_enumTypes[0]
}

func (x Frequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Frequency.Descriptor instead.
func (Frequency) EnumDescriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{0}
}

type Points struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Win     int32 `protobuf:"varint,1,opt,name=win,proto3" json:"win,omitempty"`
	Tie     int32 `protobuf:"varint,2,opt,name=tie,proto3" json:"tie,omitempty"`
	Loss    int32 `protobuf:"varint,3,opt,name=loss,proto3" json:"loss,omitempty"`
	Forfeit int32 `protobuf:"varint,4,opt,name=forfeit,proto3" json:"forfeit,omitempty"`
}

func (x *Points) Reset() {
	*x = Points{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Points) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Points) ProtoMessage() {}

func (x *Points) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Points.ProtoReflect.Descriptor instead.
func (*Points) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{0}
}

func (x *Points) GetWin() int32 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *Points) GetTie() int32 {
	if x != nil {
		return x.Tie
	}
	return 0
}

func (x *Points) GetLoss() int32 {
	if x != nil {
		return x.Loss
	}
	return 0
}

func (x *Points) GetForfeit() int32 {
	if x != nil {
		return x.Forfeit
	}
	return 0
}

type FlexibleRoundRobinDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Modified           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	DivisionId         string                 `protobuf:"bytes,4,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
	StartDate          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	Frequency          Frequency              `protobuf:"varint,6,opt,name=frequency,proto3,enum=draw.v1.private.draw.flexibleRoundRobin.Frequency" json:"frequency,omitempty"`
	Points             *Points                `protobuf:"bytes,7,opt,name=points,proto3" json:"points,omitempty"`
	Rounds             int32                  `protobuf:"varint,8,opt,name=rounds,proto3" json:"rounds,omitempty"`
	RuntimeLength      int32                  `protobuf:"varint,9,opt,name=runtime_length,json=runtimeLength,proto3" json:"runtime_length,omitempty"`
	IntermissionLength int32                  `protobuf:"varint,10,opt,name=intermission_length,json=intermissionLength,proto3" json:"intermission_length,omitempty"`
	BreakLength        int32                  `protobuf:"varint,11,opt,name=break_length,json=breakLength,proto3" json:"break_length,omitempty"`
}

func (x *FlexibleRoundRobinDraw) Reset() {
	*x = FlexibleRoundRobinDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexibleRoundRobinDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexibleRoundRobinDraw) ProtoMessage() {}

func (x *FlexibleRoundRobinDraw) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexibleRoundRobinDraw.ProtoReflect.Descriptor instead.
func (*FlexibleRoundRobinDraw) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{1}
}

func (x *FlexibleRoundRobinDraw) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlexibleRoundRobinDraw) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlexibleRoundRobinDraw) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *FlexibleRoundRobinDraw) GetDivisionId() string {
	if x != nil {
		return x.DivisionId
	}
	return ""
}

func (x *FlexibleRoundRobinDraw) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *FlexibleRoundRobinDraw) GetFrequency() Frequency {
	if x != nil {
		return x.Frequency
	}
	return Frequency_FREQUENCY_UNSPECIFIED
}

func (x *FlexibleRoundRobinDraw) GetPoints() *Points {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *FlexibleRoundRobinDraw) GetRounds() int32 {
	if x != nil {
		return x.Rounds
	}
	return 0
}

func (x *FlexibleRoundRobinDraw) GetRuntimeLength() int32 {
	if x != nil {
		return x.RuntimeLength
	}
	return 0
}

func (x *FlexibleRoundRobinDraw) GetIntermissionLength() int32 {
	if x != nil {
		return x.IntermissionLength
	}
	return 0
}

func (x *FlexibleRoundRobinDraw) GetBreakLength() int32 {
	if x != nil {
		return x.BreakLength
	}
	return 0
}

type FlexibleRoundRobinMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DrawId         string                 `protobuf:"bytes,2,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Round          int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	TeamOne        string                 `protobuf:"bytes,4,opt,name=team_one,json=teamOne,proto3" json:"team_one,omitempty"`
	TeamTwo        string                 `protobuf:"bytes,5,opt,name=team_two,json=teamTwo,proto3" json:"team_two,omitempty"`
	TeamOneScore   int32                  `protobuf:"varint,6,opt,name=team_one_score,json=teamOneScore,proto3" json:"team_one_score,omitempty"`
	TeamTwoScore   int32                  `protobuf:"varint,7,opt,name=team_two_score,json=teamTwoScore,proto3" json:"team_two_score,omitempty"`
	PlayingSpaceId string                 `protobuf:"bytes,9,opt,name=playing_space_id,json=playingSpaceId,proto3" json:"playing_space_id,omitempty"`
	Modified       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *FlexibleRoundRobinMatch) Reset() {
	*x = FlexibleRoundRobinMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexibleRoundRobinMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexibleRoundRobinMatch) ProtoMessage() {}

func (x *FlexibleRoundRobinMatch) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexibleRoundRobinMatch.ProtoReflect.Descriptor instead.
func (*FlexibleRoundRobinMatch) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{2}
}

func (x *FlexibleRoundRobinMatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *FlexibleRoundRobinMatch) GetTeamOne() string {
	if x != nil {
		return x.TeamOne
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetTeamTwo() string {
	if x != nil {
		return x.TeamTwo
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetTeamOneScore() int32 {
	if x != nil {
		return x.TeamOneScore
	}
	return 0
}

func (x *FlexibleRoundRobinMatch) GetTeamTwoScore() int32 {
	if x != nil {
		return x.TeamTwoScore
	}
	return 0
}

func (x *FlexibleRoundRobinMatch) GetPlayingSpaceId() string {
	if x != nil {
		return x.PlayingSpaceId
	}
	return ""
}

func (x *FlexibleRoundRobinMatch) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

type CreateFlexibleRoundRobinDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DivisionId string                 `protobuf:"bytes,2,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	Frequency  Frequency              `protobuf:"varint,4,opt,name=frequency,proto3,enum=draw.v1.private.draw.flexibleRoundRobin.Frequency" json:"frequency,omitempty"`
	Points     *Points                `protobuf:"bytes,5,opt,name=points,proto3" json:"points,omitempty"`
	Rounds     int32                  `protobuf:"varint,6,opt,name=rounds,proto3" json:"rounds,omitempty"`
}

func (x *CreateFlexibleRoundRobinDrawRequest) Reset() {
	*x = CreateFlexibleRoundRobinDrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlexibleRoundRobinDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlexibleRoundRobinDrawRequest) ProtoMessage() {}

func (x *CreateFlexibleRoundRobinDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlexibleRoundRobinDrawRequest.ProtoReflect.Descriptor instead.
func (*CreateFlexibleRoundRobinDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetDivisionId() string {
	if x != nil {
		return x.DivisionId
	}
	return ""
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetFrequency() Frequency {
	if x != nil {
		return x.Frequency
	}
	return Frequency_FREQUENCY_UNSPECIFIED
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetPoints() *Points {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *CreateFlexibleRoundRobinDrawRequest) GetRounds() int32 {
	if x != nil {
		return x.Rounds
	}
	return 0
}

type CreateFlexibleRoundRobinDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw *FlexibleRoundRobinDraw `protobuf:"bytes,1,opt,name=draw,proto3" json:"draw,omitempty"`
}

func (x *CreateFlexibleRoundRobinDrawResponse) Reset() {
	*x = CreateFlexibleRoundRobinDrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlexibleRoundRobinDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlexibleRoundRobinDrawResponse) ProtoMessage() {}

func (x *CreateFlexibleRoundRobinDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlexibleRoundRobinDrawResponse.ProtoReflect.Descriptor instead.
func (*CreateFlexibleRoundRobinDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFlexibleRoundRobinDrawResponse) GetDraw() *FlexibleRoundRobinDraw {
	if x != nil {
		return x.Draw
	}
	return nil
}

type UpdateFlexibleRoundRobinDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw *FlexibleRoundRobinDraw `protobuf:"bytes,1,opt,name=draw,proto3" json:"draw,omitempty"`
}

func (x *UpdateFlexibleRoundRobinDrawRequest) Reset() {
	*x = UpdateFlexibleRoundRobinDrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlexibleRoundRobinDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlexibleRoundRobinDrawRequest) ProtoMessage() {}

func (x *UpdateFlexibleRoundRobinDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlexibleRoundRobinDrawRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlexibleRoundRobinDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateFlexibleRoundRobinDrawRequest) GetDraw() *FlexibleRoundRobinDraw {
	if x != nil {
		return x.Draw
	}
	return nil
}

type UpdateFlexibleRoundRobinDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw *FlexibleRoundRobinDraw `protobuf:"bytes,1,opt,name=draw,proto3" json:"draw,omitempty"`
}

func (x *UpdateFlexibleRoundRobinDrawResponse) Reset() {
	*x = UpdateFlexibleRoundRobinDrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlexibleRoundRobinDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlexibleRoundRobinDrawResponse) ProtoMessage() {}

func (x *UpdateFlexibleRoundRobinDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlexibleRoundRobinDrawResponse.ProtoReflect.Descriptor instead.
func (*UpdateFlexibleRoundRobinDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateFlexibleRoundRobinDrawResponse) GetDraw() *FlexibleRoundRobinDraw {
	if x != nil {
		return x.Draw
	}
	return nil
}

type GetFlexibleRoundRobinDrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId string `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
}

func (x *GetFlexibleRoundRobinDrawRequest) Reset() {
	*x = GetFlexibleRoundRobinDrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlexibleRoundRobinDrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlexibleRoundRobinDrawRequest) ProtoMessage() {}

func (x *GetFlexibleRoundRobinDrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlexibleRoundRobinDrawRequest.ProtoReflect.Descriptor instead.
func (*GetFlexibleRoundRobinDrawRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{7}
}

func (x *GetFlexibleRoundRobinDrawRequest) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

type GetFlexibleRoundRobinDrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Draw *FlexibleRoundRobinDraw `protobuf:"bytes,1,opt,name=draw,proto3" json:"draw,omitempty"`
}

func (x *GetFlexibleRoundRobinDrawResponse) Reset() {
	*x = GetFlexibleRoundRobinDrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlexibleRoundRobinDrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlexibleRoundRobinDrawResponse) ProtoMessage() {}

func (x *GetFlexibleRoundRobinDrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlexibleRoundRobinDrawResponse.ProtoReflect.Descriptor instead.
func (*GetFlexibleRoundRobinDrawResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{8}
}

func (x *GetFlexibleRoundRobinDrawResponse) GetDraw() *FlexibleRoundRobinDraw {
	if x != nil {
		return x.Draw
	}
	return nil
}

type SetFlexibleRoundRobinDrawFixtureScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	TeamOneId    string `protobuf:"bytes,2,opt,name=team_one_id,json=teamOneId,proto3" json:"team_one_id,omitempty"`
	TeamTwoId    string `protobuf:"bytes,3,opt,name=team_two_id,json=teamTwoId,proto3" json:"team_two_id,omitempty"`
	TeamOneScore int32  `protobuf:"varint,4,opt,name=team_one_score,json=teamOneScore,proto3" json:"team_one_score,omitempty"`
	TeamTwoScore int32  `protobuf:"varint,5,opt,name=team_two_score,json=teamTwoScore,proto3" json:"team_two_score,omitempty"`
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreRequest) Reset() {
	*x = SetFlexibleRoundRobinDrawFixtureScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFlexibleRoundRobinDrawFixtureScoreRequest) ProtoMessage() {}

func (x *SetFlexibleRoundRobinDrawFixtureScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFlexibleRoundRobinDrawFixtureScoreRequest.ProtoReflect.Descriptor instead.
func (*SetFlexibleRoundRobinDrawFixtureScoreRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{9}
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreRequest) GetTeamOneId() string {
	if x != nil {
		return x.TeamOneId
	}
	return ""
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreRequest) GetTeamTwoId() string {
	if x != nil {
		return x.TeamTwoId
	}
	return ""
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreRequest) GetTeamOneScore() int32 {
	if x != nil {
		return x.TeamOneScore
	}
	return 0
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreRequest) GetTeamTwoScore() int32 {
	if x != nil {
		return x.TeamTwoScore
	}
	return 0
}

type SetFlexibleRoundRobinDrawFixtureScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreResponse) Reset() {
	*x = SetFlexibleRoundRobinDrawFixtureScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFlexibleRoundRobinDrawFixtureScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFlexibleRoundRobinDrawFixtureScoreResponse) ProtoMessage() {}

func (x *SetFlexibleRoundRobinDrawFixtureScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFlexibleRoundRobinDrawFixtureScoreResponse.ProtoReflect.Descriptor instead.
func (*SetFlexibleRoundRobinDrawFixtureScoreResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{10}
}

type FlexibleRoundRobinDrawChangeRoundDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId    string                 `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Round     int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	RoundDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=round_date,json=roundDate,proto3" json:"round_date,omitempty"`
}

func (x *FlexibleRoundRobinDrawChangeRoundDateRequest) Reset() {
	*x = FlexibleRoundRobinDrawChangeRoundDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexibleRoundRobinDrawChangeRoundDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexibleRoundRobinDrawChangeRoundDateRequest) ProtoMessage() {}

func (x *FlexibleRoundRobinDrawChangeRoundDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexibleRoundRobinDrawChangeRoundDateRequest.ProtoReflect.Descriptor instead.
func (*FlexibleRoundRobinDrawChangeRoundDateRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{11}
}

func (x *FlexibleRoundRobinDrawChangeRoundDateRequest) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *FlexibleRoundRobinDrawChangeRoundDateRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *FlexibleRoundRobinDrawChangeRoundDateRequest) GetRoundDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RoundDate
	}
	return nil
}

type FlexibleRoundRobinDrawChangeRoundDateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId string `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
}

func (x *FlexibleRoundRobinDrawChangeRoundDateResponse) Reset() {
	*x = FlexibleRoundRobinDrawChangeRoundDateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexibleRoundRobinDrawChangeRoundDateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexibleRoundRobinDrawChangeRoundDateResponse) ProtoMessage() {}

func (x *FlexibleRoundRobinDrawChangeRoundDateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexibleRoundRobinDrawChangeRoundDateResponse.ProtoReflect.Descriptor instead.
func (*FlexibleRoundRobinDrawChangeRoundDateResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{12}
}

func (x *FlexibleRoundRobinDrawChangeRoundDateResponse) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

type GetFlexibleRoundRobinDrawRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId string `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Round  int32  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *GetFlexibleRoundRobinDrawRoundRequest) Reset() {
	*x = GetFlexibleRoundRobinDrawRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlexibleRoundRobinDrawRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlexibleRoundRobinDrawRoundRequest) ProtoMessage() {}

func (x *GetFlexibleRoundRobinDrawRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlexibleRoundRobinDrawRoundRequest.ProtoReflect.Descriptor instead.
func (*GetFlexibleRoundRobinDrawRoundRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{13}
}

func (x *GetFlexibleRoundRobinDrawRoundRequest) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *GetFlexibleRoundRobinDrawRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type FlexibleRoundRobinDrawRoundMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId    string                 `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Round     int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	RoundDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=round_date,json=roundDate,proto3" json:"round_date,omitempty"`
}

func (x *FlexibleRoundRobinDrawRoundMetadata) Reset() {
	*x = FlexibleRoundRobinDrawRoundMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexibleRoundRobinDrawRoundMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexibleRoundRobinDrawRoundMetadata) ProtoMessage() {}

func (x *FlexibleRoundRobinDrawRoundMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexibleRoundRobinDrawRoundMetadata.ProtoReflect.Descriptor instead.
func (*FlexibleRoundRobinDrawRoundMetadata) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{14}
}

func (x *FlexibleRoundRobinDrawRoundMetadata) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *FlexibleRoundRobinDrawRoundMetadata) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *FlexibleRoundRobinDrawRoundMetadata) GetRoundDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RoundDate
	}
	return nil
}

type GetFlexibleRoundRobinDrawRoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId   string                               `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Round    int32                                `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Matches  []*FlexibleRoundRobinMatch           `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
	Metadata *FlexibleRoundRobinDrawRoundMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) Reset() {
	*x = GetFlexibleRoundRobinDrawRoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlexibleRoundRobinDrawRoundResponse) ProtoMessage() {}

func (x *GetFlexibleRoundRobinDrawRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlexibleRoundRobinDrawRoundResponse.ProtoReflect.Descriptor instead.
func (*GetFlexibleRoundRobinDrawRoundResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{15}
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) GetMatches() []*FlexibleRoundRobinMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *GetFlexibleRoundRobinDrawRoundResponse) GetMetadata() *FlexibleRoundRobinDrawRoundMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type FlexibleRoundRobinDrawLeaderboardTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId       string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TeamName     string `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	Wins         int32  `protobuf:"varint,3,opt,name=wins,proto3" json:"wins,omitempty"`
	Ties         int32  `protobuf:"varint,4,opt,name=ties,proto3" json:"ties,omitempty"`
	Losses       int32  `protobuf:"varint,5,opt,name=losses,proto3" json:"losses,omitempty"`
	Forfeits     int32  `protobuf:"varint,6,opt,name=forfeits,proto3" json:"forfeits,omitempty"`
	Points       int32  `protobuf:"varint,7,opt,name=points,proto3" json:"points,omitempty"`
	Differential int32  `protobuf:"varint,8,opt,name=differential,proto3" json:"differential,omitempty"`
	Placement    int32  `protobuf:"varint,9,opt,name=placement,proto3" json:"placement,omitempty"`
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) Reset() {
	*x = FlexibleRoundRobinDrawLeaderboardTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexibleRoundRobinDrawLeaderboardTeam) ProtoMessage() {}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexibleRoundRobinDrawLeaderboardTeam.ProtoReflect.Descriptor instead.
func (*FlexibleRoundRobinDrawLeaderboardTeam) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{16}
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetTies() int32 {
	if x != nil {
		return x.Ties
	}
	return 0
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetLosses() int32 {
	if x != nil {
		return x.Losses
	}
	return 0
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetForfeits() int32 {
	if x != nil {
		return x.Forfeits
	}
	return 0
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetDifferential() int32 {
	if x != nil {
		return x.Differential
	}
	return 0
}

func (x *FlexibleRoundRobinDrawLeaderboardTeam) GetPlacement() int32 {
	if x != nil {
		return x.Placement
	}
	return 0
}

type GetFlexibleRoundRobinDrawLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId string `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
}

func (x *GetFlexibleRoundRobinDrawLeaderboardRequest) Reset() {
	*x = GetFlexibleRoundRobinDrawLeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlexibleRoundRobinDrawLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlexibleRoundRobinDrawLeaderboardRequest) ProtoMessage() {}

func (x *GetFlexibleRoundRobinDrawLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlexibleRoundRobinDrawLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*GetFlexibleRoundRobinDrawLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{17}
}

func (x *GetFlexibleRoundRobinDrawLeaderboardRequest) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

type GetFlexibleRoundRobinDrawLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrawId string                                   `protobuf:"bytes,1,opt,name=draw_id,json=drawId,proto3" json:"draw_id,omitempty"`
	Teams  []*FlexibleRoundRobinDrawLeaderboardTeam `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *GetFlexibleRoundRobinDrawLeaderboardResponse) Reset() {
	*x = GetFlexibleRoundRobinDrawLeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlexibleRoundRobinDrawLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlexibleRoundRobinDrawLeaderboardResponse) ProtoMessage() {}

func (x *GetFlexibleRoundRobinDrawLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlexibleRoundRobinDrawLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*GetFlexibleRoundRobinDrawLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP(), []int{18}
}

func (x *GetFlexibleRoundRobinDrawLeaderboardResponse) GetDrawId() string {
	if x != nil {
		return x.DrawId
	}
	return ""
}

func (x *GetFlexibleRoundRobinDrawLeaderboardResponse) GetTeams() []*FlexibleRoundRobinDrawLeaderboardTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

var File_draw_v1_private_flexible_round_robin_flexible_round_robin_proto protoreflect.FileDescriptor

var file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x64, 0x72, 0x61, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x2d, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x2d,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x27, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x06, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x66, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x22, 0xfe, 0x03, 0x0a, 0x16, 0x46, 0x6c, 0x65, 0x78,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72,
	0x61, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xbc, 0x02, 0x0a, 0x17, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x77, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x77, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x77, 0x6f,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xdc, 0x02, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69,
	0x6e, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x7b, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x04, 0x64,
	0x72, 0x61, 0x77, 0x22, 0x7a, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e,
	0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x22,
	0x7b, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e,
	0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x22, 0x3b, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x04, 0x64,
	0x72, 0x61, 0x77, 0x22, 0xd5, 0x01, 0x0a, 0x2c, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61,
	0x77, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x77, 0x6f, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x77,
	0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x77, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x2f, 0x0a, 0x2d, 0x53,
	0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x2c, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f,
	0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x2d, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x77, 0x49,
	0x64, 0x22, 0x56, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61,
	0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x23, 0x46, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e,
	0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e,
	0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f,
	0x62, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x46, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e,
	0x44, 0x72, 0x61, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x02, 0x0a, 0x25,
	0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x46, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x72, 0x61, 0x77, 0x49, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x2c, 0x47, 0x65,
	0x74, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f,
	0x62, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x61,
	0x77, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x72, 0x61, 0x77, 0x2e, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x2e, 0x46, 0x6c, 0x65,
	0x78, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x44,
	0x72, 0x61, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2a, 0x92, 0x01, 0x0a, 0x09, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x41, 0x53, 0x41, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x05, 0x42, 0x7b,
	0x5a, 0x79, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x65,
	0x67, 0x61, 0x6e, 0x63, 0x72, 0x61, 0x69, 0x67, 0x63, 0x72, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x68,
	0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x6f, 0x6c, 0x6c, 0x65, 0x79, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x72, 0x61, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x2d,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x3b, 0x64, 0x72, 0x61, 0x77,
	0x76, 0x31, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c,
	0x65, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescOnce sync.Once
	file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescData = file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDesc
)

func file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescGZIP() []byte {
	file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescOnce.Do(func() {
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescData = protoimpl.X.CompressGZIP(file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescData)
	})
	return file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDescData
}

var file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_goTypes = []any{
	(Frequency)(0),                                        // 0: draw.v1.private.draw.flexibleRoundRobin.Frequency
	(*Points)(nil),                                        // 1: draw.v1.private.draw.flexibleRoundRobin.Points
	(*FlexibleRoundRobinDraw)(nil),                        // 2: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw
	(*FlexibleRoundRobinMatch)(nil),                       // 3: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinMatch
	(*CreateFlexibleRoundRobinDrawRequest)(nil),           // 4: draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawRequest
	(*CreateFlexibleRoundRobinDrawResponse)(nil),          // 5: draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawResponse
	(*UpdateFlexibleRoundRobinDrawRequest)(nil),           // 6: draw.v1.private.draw.flexibleRoundRobin.UpdateFlexibleRoundRobinDrawRequest
	(*UpdateFlexibleRoundRobinDrawResponse)(nil),          // 7: draw.v1.private.draw.flexibleRoundRobin.UpdateFlexibleRoundRobinDrawResponse
	(*GetFlexibleRoundRobinDrawRequest)(nil),              // 8: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRequest
	(*GetFlexibleRoundRobinDrawResponse)(nil),             // 9: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawResponse
	(*SetFlexibleRoundRobinDrawFixtureScoreRequest)(nil),  // 10: draw.v1.private.draw.flexibleRoundRobin.SetFlexibleRoundRobinDrawFixtureScoreRequest
	(*SetFlexibleRoundRobinDrawFixtureScoreResponse)(nil), // 11: draw.v1.private.draw.flexibleRoundRobin.SetFlexibleRoundRobinDrawFixtureScoreResponse
	(*FlexibleRoundRobinDrawChangeRoundDateRequest)(nil),  // 12: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawChangeRoundDateRequest
	(*FlexibleRoundRobinDrawChangeRoundDateResponse)(nil), // 13: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawChangeRoundDateResponse
	(*GetFlexibleRoundRobinDrawRoundRequest)(nil),         // 14: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRoundRequest
	(*FlexibleRoundRobinDrawRoundMetadata)(nil),           // 15: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawRoundMetadata
	(*GetFlexibleRoundRobinDrawRoundResponse)(nil),        // 16: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRoundResponse
	(*FlexibleRoundRobinDrawLeaderboardTeam)(nil),         // 17: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawLeaderboardTeam
	(*GetFlexibleRoundRobinDrawLeaderboardRequest)(nil),   // 18: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawLeaderboardRequest
	(*GetFlexibleRoundRobinDrawLeaderboardResponse)(nil),  // 19: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawLeaderboardResponse
	(*timestamppb.Timestamp)(nil),                         // 20: google.protobuf.Timestamp
}
var file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_depIdxs = []int32{
	20, // 0: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw.modified:type_name -> google.protobuf.Timestamp
	20, // 1: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw.start_date:type_name -> google.protobuf.Timestamp
	0,  // 2: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw.frequency:type_name -> draw.v1.private.draw.flexibleRoundRobin.Frequency
	1,  // 3: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw.points:type_name -> draw.v1.private.draw.flexibleRoundRobin.Points
	20, // 4: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinMatch.modified:type_name -> google.protobuf.Timestamp
	20, // 5: draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawRequest.start_date:type_name -> google.protobuf.Timestamp
	0,  // 6: draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawRequest.frequency:type_name -> draw.v1.private.draw.flexibleRoundRobin.Frequency
	1,  // 7: draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawRequest.points:type_name -> draw.v1.private.draw.flexibleRoundRobin.Points
	2,  // 8: draw.v1.private.draw.flexibleRoundRobin.CreateFlexibleRoundRobinDrawResponse.draw:type_name -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw
	2,  // 9: draw.v1.private.draw.flexibleRoundRobin.UpdateFlexibleRoundRobinDrawRequest.draw:type_name -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw
	2,  // 10: draw.v1.private.draw.flexibleRoundRobin.UpdateFlexibleRoundRobinDrawResponse.draw:type_name -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw
	2,  // 11: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawResponse.draw:type_name -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDraw
	20, // 12: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawChangeRoundDateRequest.round_date:type_name -> google.protobuf.Timestamp
	20, // 13: draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawRoundMetadata.round_date:type_name -> google.protobuf.Timestamp
	3,  // 14: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRoundResponse.matches:type_name -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinMatch
	15, // 15: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawRoundResponse.metadata:type_name -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawRoundMetadata
	17, // 16: draw.v1.private.draw.flexibleRoundRobin.GetFlexibleRoundRobinDrawLeaderboardResponse.teams:type_name -> draw.v1.private.draw.flexibleRoundRobin.FlexibleRoundRobinDrawLeaderboardTeam
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_init() }
func file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_init() {
	if File_draw_v1_private_flexible_round_robin_flexible_round_robin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Points); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FlexibleRoundRobinDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FlexibleRoundRobinMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFlexibleRoundRobinDrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFlexibleRoundRobinDrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateFlexibleRoundRobinDrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateFlexibleRoundRobinDrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetFlexibleRoundRobinDrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetFlexibleRoundRobinDrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SetFlexibleRoundRobinDrawFixtureScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SetFlexibleRoundRobinDrawFixtureScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FlexibleRoundRobinDrawChangeRoundDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FlexibleRoundRobinDrawChangeRoundDateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetFlexibleRoundRobinDrawRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*FlexibleRoundRobinDrawRoundMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetFlexibleRoundRobinDrawRoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*FlexibleRoundRobinDrawLeaderboardTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetFlexibleRoundRobinDrawLeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetFlexibleRoundRobinDrawLeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_goTypes,
		DependencyIndexes: file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_depIdxs,
		EnumInfos:         file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_enumTypes,
		MessageInfos:      file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_msgTypes,
	}.Build()
	File_draw_v1_private_flexible_round_robin_flexible_round_robin_proto = out.File
	file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_rawDesc = nil
	file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_goTypes = nil
	file_draw_v1_private_flexible_round_robin_flexible_round_robin_proto_depIdxs = nil
}
