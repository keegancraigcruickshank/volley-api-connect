// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: teams/v1/private/teams.proto

package teamsv1private

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortDirection int32

const (
	SortDirection_ASC  SortDirection = 0
	SortDirection_DESC SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	SortDirection_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_teams_v1_private_teams_proto_enumTypes[0].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_teams_v1_private_teams_proto_enumTypes[0]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{0}
}

type ListedTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Players  []string `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	Modified int32    `protobuf:"varint,4,opt,name=modified,proto3" json:"modified,omitempty"`
	Division string   `protobuf:"bytes,5,opt,name=division,proto3" json:"division,omitempty"`
}

func (x *ListedTeam) Reset() {
	*x = ListedTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListedTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListedTeam) ProtoMessage() {}

func (x *ListedTeam) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListedTeam.ProtoReflect.Descriptor instead.
func (*ListedTeam) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{0}
}

func (x *ListedTeam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListedTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListedTeam) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *ListedTeam) GetModified() int32 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *ListedTeam) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

type AddTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Players  []string `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Division *string  `protobuf:"bytes,3,opt,name=division,proto3,oneof" json:"division,omitempty"`
}

func (x *AddTeamRequest) Reset() {
	*x = AddTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTeamRequest) ProtoMessage() {}

func (x *AddTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTeamRequest.ProtoReflect.Descriptor instead.
func (*AddTeamRequest) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{1}
}

func (x *AddTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTeamRequest) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *AddTeamRequest) GetDivision() string {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return ""
}

type AddTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Players  []string `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	Division string   `protobuf:"bytes,4,opt,name=division,proto3" json:"division,omitempty"`
}

func (x *AddTeamResponse) Reset() {
	*x = AddTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTeamResponse) ProtoMessage() {}

func (x *AddTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTeamResponse.ProtoReflect.Descriptor instead.
func (*AddTeamResponse) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{2}
}

func (x *AddTeamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddTeamResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTeamResponse) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *AddTeamResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

type ListTeamsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamIds     []string `protobuf:"bytes,1,rep,name=team_ids,json=teamIds,proto3" json:"team_ids,omitempty"`
	DivisionIds []string `protobuf:"bytes,2,rep,name=division_ids,json=divisionIds,proto3" json:"division_ids,omitempty"`
}

func (x *ListTeamsFilter) Reset() {
	*x = ListTeamsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamsFilter) ProtoMessage() {}

func (x *ListTeamsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamsFilter.ProtoReflect.Descriptor instead.
func (*ListTeamsFilter) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{3}
}

func (x *ListTeamsFilter) GetTeamIds() []string {
	if x != nil {
		return x.TeamIds
	}
	return nil
}

func (x *ListTeamsFilter) GetDivisionIds() []string {
	if x != nil {
		return x.DivisionIds
	}
	return nil
}

type ListTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query         string           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page          *int32           `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize      *int32           `protobuf:"varint,3,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
	SortDirection *SortDirection   `protobuf:"varint,4,opt,name=sortDirection,proto3,enum=teams.v1.private.SortDirection,oneof" json:"sortDirection,omitempty"`
	Filter        *ListTeamsFilter `protobuf:"bytes,5,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListTeamsRequest) Reset() {
	*x = ListTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamsRequest) ProtoMessage() {}

func (x *ListTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamsRequest.ProtoReflect.Descriptor instead.
func (*ListTeamsRequest) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{4}
}

func (x *ListTeamsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListTeamsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListTeamsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListTeamsRequest) GetSortDirection() SortDirection {
	if x != nil && x.SortDirection != nil {
		return *x.SortDirection
	}
	return SortDirection_ASC
}

func (x *ListTeamsRequest) GetFilter() *ListTeamsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams      []*ListedTeam `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	TotalCount int32         `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *ListTeamsResponse) Reset() {
	*x = ListTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamsResponse) ProtoMessage() {}

func (x *ListTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamsResponse.ProtoReflect.Descriptor instead.
func (*ListTeamsResponse) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{5}
}

func (x *ListTeamsResponse) GetTeams() []*ListedTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *ListTeamsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTeamRequest) Reset() {
	*x = GetTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamRequest) ProtoMessage() {}

func (x *GetTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamRequest.ProtoReflect.Descriptor instead.
func (*GetTeamRequest) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{6}
}

func (x *GetTeamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Players  []string `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	Modified int32    `protobuf:"varint,4,opt,name=modified,proto3" json:"modified,omitempty"`
	Division string   `protobuf:"bytes,5,opt,name=division,proto3" json:"division,omitempty"`
}

func (x *GetTeamResponse) Reset() {
	*x = GetTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamResponse) ProtoMessage() {}

func (x *GetTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamResponse.ProtoReflect.Descriptor instead.
func (*GetTeamResponse) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{7}
}

func (x *GetTeamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTeamResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTeamResponse) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GetTeamResponse) GetModified() int32 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *GetTeamResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

type RemoveTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []string `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *RemoveTeamsRequest) Reset() {
	*x = RemoveTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTeamsRequest) ProtoMessage() {}

func (x *RemoveTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTeamsRequest.ProtoReflect.Descriptor instead.
func (*RemoveTeamsRequest) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveTeamsRequest) GetTeams() []string {
	if x != nil {
		return x.Teams
	}
	return nil
}

type RemoveTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTeamsResponse) Reset() {
	*x = RemoveTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTeamsResponse) ProtoMessage() {}

func (x *RemoveTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTeamsResponse.ProtoReflect.Descriptor instead.
func (*RemoveTeamsResponse) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{9}
}

type UpdateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     *string  `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Players  []string `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	Division *string  `protobuf:"bytes,4,opt,name=division,proto3,oneof" json:"division,omitempty"`
}

func (x *UpdateTeamRequest) Reset() {
	*x = UpdateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamRequest) ProtoMessage() {}

func (x *UpdateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamRequest) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateTeamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTeamRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateTeamRequest) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *UpdateTeamRequest) GetDivision() string {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return ""
}

type UpdateTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Players []string `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *UpdateTeamResponse) Reset() {
	*x = UpdateTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamResponse) ProtoMessage() {}

func (x *UpdateTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamResponse.ProtoReflect.Descriptor instead.
func (*UpdateTeamResponse) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateTeamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTeamResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTeamResponse) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

type AssociatePlayersToTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []string `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Teams   []string `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *AssociatePlayersToTeamsRequest) Reset() {
	*x = AssociatePlayersToTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatePlayersToTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatePlayersToTeamsRequest) ProtoMessage() {}

func (x *AssociatePlayersToTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatePlayersToTeamsRequest.ProtoReflect.Descriptor instead.
func (*AssociatePlayersToTeamsRequest) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{12}
}

func (x *AssociatePlayersToTeamsRequest) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *AssociatePlayersToTeamsRequest) GetTeams() []string {
	if x != nil {
		return x.Teams
	}
	return nil
}

type AssociatePlayersToTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssociatePlayersToTeamsResponse) Reset() {
	*x = AssociatePlayersToTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatePlayersToTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatePlayersToTeamsResponse) ProtoMessage() {}

func (x *AssociatePlayersToTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatePlayersToTeamsResponse.ProtoReflect.Descriptor instead.
func (*AssociatePlayersToTeamsResponse) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{13}
}

type DissociatePlayersFromTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []string `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Teams   []string `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *DissociatePlayersFromTeamsRequest) Reset() {
	*x = DissociatePlayersFromTeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DissociatePlayersFromTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DissociatePlayersFromTeamsRequest) ProtoMessage() {}

func (x *DissociatePlayersFromTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DissociatePlayersFromTeamsRequest.ProtoReflect.Descriptor instead.
func (*DissociatePlayersFromTeamsRequest) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{14}
}

func (x *DissociatePlayersFromTeamsRequest) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *DissociatePlayersFromTeamsRequest) GetTeams() []string {
	if x != nil {
		return x.Teams
	}
	return nil
}

type DissociatePlayersFromTeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DissociatePlayersFromTeamsResponse) Reset() {
	*x = DissociatePlayersFromTeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DissociatePlayersFromTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DissociatePlayersFromTeamsResponse) ProtoMessage() {}

func (x *DissociatePlayersFromTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DissociatePlayersFromTeamsResponse.ProtoReflect.Descriptor instead.
func (*DissociatePlayersFromTeamsResponse) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{15}
}

type UpdateTeamDivisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId     string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	DivisionId string `protobuf:"bytes,2,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
}

func (x *UpdateTeamDivisionRequest) Reset() {
	*x = UpdateTeamDivisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamDivisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamDivisionRequest) ProtoMessage() {}

func (x *UpdateTeamDivisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamDivisionRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamDivisionRequest) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateTeamDivisionRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *UpdateTeamDivisionRequest) GetDivisionId() string {
	if x != nil {
		return x.DivisionId
	}
	return ""
}

type UpdateTeamDivisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTeamDivisionResponse) Reset() {
	*x = UpdateTeamDivisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teams_v1_private_teams_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamDivisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamDivisionResponse) ProtoMessage() {}

func (x *UpdateTeamDivisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teams_v1_private_teams_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamDivisionResponse.ProtoReflect.Descriptor instead.
func (*UpdateTeamDivisionResponse) Descriptor() ([]byte, []int) {
	return file_teams_v1_private_teams_proto_rawDescGZIP(), []int{17}
}

var File_teams_v1_private_teams_proto protoreflect.FileDescriptor

var file_teams_v1_private_teams_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd0, 0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x33,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32,
	0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x33, 0x92, 0x41,
	0x30, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92,
	0x41, 0x26, 0x32, 0x24, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x12, 0x32, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x4c, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x02, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x65, 0x61, 0x6d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x08,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x26, 0x32, 0x24, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44,
	0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x49, 0x44, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41,
	0x23, 0x32, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x20, 0x62, 0x79, 0x52, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x22, 0xe6, 0x03, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x50, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x33, 0x92, 0x41, 0x30,
	0x32, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x28, 0x4d, 0x61, 0x78, 0x20, 0x31, 0x30, 0x30, 0x29,
	0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x6b, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x12, 0x92,
	0x41, 0x0f, 0x32, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d, 0x92, 0x41,
	0x2a, 0x32, 0x28, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xd5, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x4e,
	0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x12, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22,
	0x92, 0x41, 0x1c, 0x32, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xad, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x12, 0x32, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x65, 0x61, 0x6d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x08,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0x92, 0x41, 0x28, 0x32, 0x26, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x48, 0x01, 0x52, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xc0, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32,
	0x10, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44,
	0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x21, 0x44, 0x69,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x51, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x37, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x37, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x49, 0x44, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x22, 0x24, 0x0a, 0x22, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x28,
	0x32, 0x26, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x22, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x32, 0xaf, 0x14, 0x0a, 0x13, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xb6, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xe5, 0x01, 0x92, 0x41, 0xa9, 0x01, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x0a, 0x41, 0x64, 0x64, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x1a, 0x2b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4a, 0x55, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x4e, 0x0a, 0x25, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x23, 0x1a, 0x21, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x12, 0xca, 0x02, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xf3, 0x01, 0x92, 0x41, 0xb5, 0x01, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x34, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x4a, 0x58, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x51, 0x0a, 0x26, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x27, 0x0a, 0x25, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x10, 0x0a, 0x0e, 0x0a,
	0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22, 0x2f, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0xad, 0x02, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdc, 0x01, 0x92, 0x41, 0xa0, 0x01, 0x0a,
	0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x08, 0x47, 0x65, 0x74, 0x20, 0x74, 0x65, 0x61, 0x6d,
	0x1a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x4a, 0x55, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a,
	0x25, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x23, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x10, 0x0a,
	0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x8d, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x92, 0x41, 0x71, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a,
	0x2a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4a, 0x1c, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x15, 0x0a, 0x13, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0xc9, 0x02, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xef, 0x01, 0x92, 0x41, 0xb0, 0x01, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x1a, 0x26, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x4a, 0x60, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x2d, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x26,
	0x1a, 0x24, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01,
	0x2a, 0x22, 0x30, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0xda, 0x02, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x30, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01, 0x92, 0x41, 0x8d, 0x01, 0x0a, 0x05, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x1a, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x38,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x4a, 0x1c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x15, 0x0a, 0x13, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x3a, 0x01,
	0x2a, 0x22, 0x3d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0xea, 0x02, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x33, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe0, 0x01, 0x92, 0x41, 0x91,
	0x01, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x4a, 0x1c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x15, 0x0a, 0x13, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0xbb, 0x02,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xc9, 0x01, 0x92, 0x41, 0x82, 0x01, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x33, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x4a, 0x1c, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x15, 0x0a, 0x13, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01,
	0x2a, 0x22, 0x38, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x56, 0x5a, 0x54, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x65, 0x67, 0x61, 0x6e,
	0x63, 0x72, 0x61, 0x69, 0x67, 0x63, 0x72, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x68, 0x61, 0x6e, 0x6b,
	0x2f, 0x76, 0x6f, 0x6c, 0x6c, 0x65, 0x79, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x3b, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x76, 0x31, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teams_v1_private_teams_proto_rawDescOnce sync.Once
	file_teams_v1_private_teams_proto_rawDescData = file_teams_v1_private_teams_proto_rawDesc
)

func file_teams_v1_private_teams_proto_rawDescGZIP() []byte {
	file_teams_v1_private_teams_proto_rawDescOnce.Do(func() {
		file_teams_v1_private_teams_proto_rawDescData = protoimpl.X.CompressGZIP(file_teams_v1_private_teams_proto_rawDescData)
	})
	return file_teams_v1_private_teams_proto_rawDescData
}

var file_teams_v1_private_teams_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_teams_v1_private_teams_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_teams_v1_private_teams_proto_goTypes = []any{
	(SortDirection)(0),                         // 0: teams.v1.private.SortDirection
	(*ListedTeam)(nil),                         // 1: teams.v1.private.ListedTeam
	(*AddTeamRequest)(nil),                     // 2: teams.v1.private.AddTeamRequest
	(*AddTeamResponse)(nil),                    // 3: teams.v1.private.AddTeamResponse
	(*ListTeamsFilter)(nil),                    // 4: teams.v1.private.ListTeamsFilter
	(*ListTeamsRequest)(nil),                   // 5: teams.v1.private.ListTeamsRequest
	(*ListTeamsResponse)(nil),                  // 6: teams.v1.private.ListTeamsResponse
	(*GetTeamRequest)(nil),                     // 7: teams.v1.private.GetTeamRequest
	(*GetTeamResponse)(nil),                    // 8: teams.v1.private.GetTeamResponse
	(*RemoveTeamsRequest)(nil),                 // 9: teams.v1.private.RemoveTeamsRequest
	(*RemoveTeamsResponse)(nil),                // 10: teams.v1.private.RemoveTeamsResponse
	(*UpdateTeamRequest)(nil),                  // 11: teams.v1.private.UpdateTeamRequest
	(*UpdateTeamResponse)(nil),                 // 12: teams.v1.private.UpdateTeamResponse
	(*AssociatePlayersToTeamsRequest)(nil),     // 13: teams.v1.private.AssociatePlayersToTeamsRequest
	(*AssociatePlayersToTeamsResponse)(nil),    // 14: teams.v1.private.AssociatePlayersToTeamsResponse
	(*DissociatePlayersFromTeamsRequest)(nil),  // 15: teams.v1.private.DissociatePlayersFromTeamsRequest
	(*DissociatePlayersFromTeamsResponse)(nil), // 16: teams.v1.private.DissociatePlayersFromTeamsResponse
	(*UpdateTeamDivisionRequest)(nil),          // 17: teams.v1.private.UpdateTeamDivisionRequest
	(*UpdateTeamDivisionResponse)(nil),         // 18: teams.v1.private.UpdateTeamDivisionResponse
}
var file_teams_v1_private_teams_proto_depIdxs = []int32{
	0,  // 0: teams.v1.private.ListTeamsRequest.sortDirection:type_name -> teams.v1.private.SortDirection
	4,  // 1: teams.v1.private.ListTeamsRequest.filter:type_name -> teams.v1.private.ListTeamsFilter
	1,  // 2: teams.v1.private.ListTeamsResponse.teams:type_name -> teams.v1.private.ListedTeam
	2,  // 3: teams.v1.private.PrivateTeamsService.AddTeam:input_type -> teams.v1.private.AddTeamRequest
	5,  // 4: teams.v1.private.PrivateTeamsService.ListTeams:input_type -> teams.v1.private.ListTeamsRequest
	7,  // 5: teams.v1.private.PrivateTeamsService.GetTeam:input_type -> teams.v1.private.GetTeamRequest
	9,  // 6: teams.v1.private.PrivateTeamsService.RemoveTeams:input_type -> teams.v1.private.RemoveTeamsRequest
	11, // 7: teams.v1.private.PrivateTeamsService.UpdateTeam:input_type -> teams.v1.private.UpdateTeamRequest
	13, // 8: teams.v1.private.PrivateTeamsService.AssociatePlayersToTeams:input_type -> teams.v1.private.AssociatePlayersToTeamsRequest
	15, // 9: teams.v1.private.PrivateTeamsService.DissociatePlayersFromTeams:input_type -> teams.v1.private.DissociatePlayersFromTeamsRequest
	17, // 10: teams.v1.private.PrivateTeamsService.UpdateTeamDivision:input_type -> teams.v1.private.UpdateTeamDivisionRequest
	3,  // 11: teams.v1.private.PrivateTeamsService.AddTeam:output_type -> teams.v1.private.AddTeamResponse
	6,  // 12: teams.v1.private.PrivateTeamsService.ListTeams:output_type -> teams.v1.private.ListTeamsResponse
	8,  // 13: teams.v1.private.PrivateTeamsService.GetTeam:output_type -> teams.v1.private.GetTeamResponse
	10, // 14: teams.v1.private.PrivateTeamsService.RemoveTeams:output_type -> teams.v1.private.RemoveTeamsResponse
	12, // 15: teams.v1.private.PrivateTeamsService.UpdateTeam:output_type -> teams.v1.private.UpdateTeamResponse
	14, // 16: teams.v1.private.PrivateTeamsService.AssociatePlayersToTeams:output_type -> teams.v1.private.AssociatePlayersToTeamsResponse
	16, // 17: teams.v1.private.PrivateTeamsService.DissociatePlayersFromTeams:output_type -> teams.v1.private.DissociatePlayersFromTeamsResponse
	18, // 18: teams.v1.private.PrivateTeamsService.UpdateTeamDivision:output_type -> teams.v1.private.UpdateTeamDivisionResponse
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_teams_v1_private_teams_proto_init() }
func file_teams_v1_private_teams_proto_init() {
	if File_teams_v1_private_teams_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_teams_v1_private_teams_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListedTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AddTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListTeamsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AssociatePlayersToTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AssociatePlayersToTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DissociatePlayersFromTeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DissociatePlayersFromTeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamDivisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teams_v1_private_teams_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamDivisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teams_v1_private_teams_proto_msgTypes[1].OneofWrappers = []any{}
	file_teams_v1_private_teams_proto_msgTypes[4].OneofWrappers = []any{}
	file_teams_v1_private_teams_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teams_v1_private_teams_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teams_v1_private_teams_proto_goTypes,
		DependencyIndexes: file_teams_v1_private_teams_proto_depIdxs,
		EnumInfos:         file_teams_v1_private_teams_proto_enumTypes,
		MessageInfos:      file_teams_v1_private_teams_proto_msgTypes,
	}.Build()
	File_teams_v1_private_teams_proto = out.File
	file_teams_v1_private_teams_proto_rawDesc = nil
	file_teams_v1_private_teams_proto_goTypes = nil
	file_teams_v1_private_teams_proto_depIdxs = nil
}
