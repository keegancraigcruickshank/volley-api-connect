// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: court/v1/private/courts.proto

package courtsv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	private "github.com/keegancraigcruickshank/volley-api-connect/courts/v1/private"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PrivateCourtsServiceName is the fully-qualified name of the PrivateCourtsService service.
	PrivateCourtsServiceName = "courts.v1.private.PrivateCourtsService"
)

// PrivateCourtsServiceClient is a client for the courts.v1.private.PrivateCourtsService service.
type PrivateCourtsServiceClient interface {
	CreateCourt(context.Context, *connect_go.Request[private.CreateCourtRequest]) (*connect_go.Response[private.CreateCourtResponse], error)
	ListCourts(context.Context, *connect_go.Request[private.ListCourtsRequest]) (*connect_go.Response[private.ListCourtsResponse], error)
}

// NewPrivateCourtsServiceClient constructs a client for the courts.v1.private.PrivateCourtsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrivateCourtsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PrivateCourtsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &privateCourtsServiceClient{
		createCourt: connect_go.NewClient[private.CreateCourtRequest, private.CreateCourtResponse](
			httpClient,
			baseURL+"/courts.v1.private.PrivateCourtsService/CreateCourt",
			opts...,
		),
		listCourts: connect_go.NewClient[private.ListCourtsRequest, private.ListCourtsResponse](
			httpClient,
			baseURL+"/courts.v1.private.PrivateCourtsService/ListCourts",
			opts...,
		),
	}
}

// privateCourtsServiceClient implements PrivateCourtsServiceClient.
type privateCourtsServiceClient struct {
	createCourt *connect_go.Client[private.CreateCourtRequest, private.CreateCourtResponse]
	listCourts  *connect_go.Client[private.ListCourtsRequest, private.ListCourtsResponse]
}

// CreateCourt calls courts.v1.private.PrivateCourtsService.CreateCourt.
func (c *privateCourtsServiceClient) CreateCourt(ctx context.Context, req *connect_go.Request[private.CreateCourtRequest]) (*connect_go.Response[private.CreateCourtResponse], error) {
	return c.createCourt.CallUnary(ctx, req)
}

// ListCourts calls courts.v1.private.PrivateCourtsService.ListCourts.
func (c *privateCourtsServiceClient) ListCourts(ctx context.Context, req *connect_go.Request[private.ListCourtsRequest]) (*connect_go.Response[private.ListCourtsResponse], error) {
	return c.listCourts.CallUnary(ctx, req)
}

// PrivateCourtsServiceHandler is an implementation of the courts.v1.private.PrivateCourtsService
// service.
type PrivateCourtsServiceHandler interface {
	CreateCourt(context.Context, *connect_go.Request[private.CreateCourtRequest]) (*connect_go.Response[private.CreateCourtResponse], error)
	ListCourts(context.Context, *connect_go.Request[private.ListCourtsRequest]) (*connect_go.Response[private.ListCourtsResponse], error)
}

// NewPrivateCourtsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrivateCourtsServiceHandler(svc PrivateCourtsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/courts.v1.private.PrivateCourtsService/CreateCourt", connect_go.NewUnaryHandler(
		"/courts.v1.private.PrivateCourtsService/CreateCourt",
		svc.CreateCourt,
		opts...,
	))
	mux.Handle("/courts.v1.private.PrivateCourtsService/ListCourts", connect_go.NewUnaryHandler(
		"/courts.v1.private.PrivateCourtsService/ListCourts",
		svc.ListCourts,
		opts...,
	))
	return "/courts.v1.private.PrivateCourtsService/", mux
}

// UnimplementedPrivateCourtsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrivateCourtsServiceHandler struct{}

func (UnimplementedPrivateCourtsServiceHandler) CreateCourt(context.Context, *connect_go.Request[private.CreateCourtRequest]) (*connect_go.Response[private.CreateCourtResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("courts.v1.private.PrivateCourtsService.CreateCourt is not implemented"))
}

func (UnimplementedPrivateCourtsServiceHandler) ListCourts(context.Context, *connect_go.Request[private.ListCourtsRequest]) (*connect_go.Response[private.ListCourtsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("courts.v1.private.PrivateCourtsService.ListCourts is not implemented"))
}
