// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: add-ons/v1/private/add_ons.proto

package addonsv1privateconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	private "github.com/keegancraigcruickshank/volley-api-connect/addons/v1/private"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PrivateAddonsServiceName is the fully-qualified name of the PrivateAddonsService service.
	PrivateAddonsServiceName = "addons.v1.private.PrivateAddonsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PrivateAddonsServiceEnableAddonProcedure is the fully-qualified name of the
	// PrivateAddonsService's EnableAddon RPC.
	PrivateAddonsServiceEnableAddonProcedure = "/addons.v1.private.PrivateAddonsService/EnableAddon"
	// PrivateAddonsServiceListAddonsProcedure is the fully-qualified name of the PrivateAddonsService's
	// ListAddons RPC.
	PrivateAddonsServiceListAddonsProcedure = "/addons.v1.private.PrivateAddonsService/ListAddons"
)

// PrivateAddonsServiceClient is a client for the addons.v1.private.PrivateAddonsService service.
type PrivateAddonsServiceClient interface {
	EnableAddon(context.Context, *connect_go.Request[private.EnableAddonRequest]) (*connect_go.Response[private.EnableAddonResponse], error)
	ListAddons(context.Context, *connect_go.Request[private.ListAddonsRequest]) (*connect_go.Response[private.ListAddonsResponse], error)
}

// NewPrivateAddonsServiceClient constructs a client for the addons.v1.private.PrivateAddonsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPrivateAddonsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PrivateAddonsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &privateAddonsServiceClient{
		enableAddon: connect_go.NewClient[private.EnableAddonRequest, private.EnableAddonResponse](
			httpClient,
			baseURL+PrivateAddonsServiceEnableAddonProcedure,
			opts...,
		),
		listAddons: connect_go.NewClient[private.ListAddonsRequest, private.ListAddonsResponse](
			httpClient,
			baseURL+PrivateAddonsServiceListAddonsProcedure,
			opts...,
		),
	}
}

// privateAddonsServiceClient implements PrivateAddonsServiceClient.
type privateAddonsServiceClient struct {
	enableAddon *connect_go.Client[private.EnableAddonRequest, private.EnableAddonResponse]
	listAddons  *connect_go.Client[private.ListAddonsRequest, private.ListAddonsResponse]
}

// EnableAddon calls addons.v1.private.PrivateAddonsService.EnableAddon.
func (c *privateAddonsServiceClient) EnableAddon(ctx context.Context, req *connect_go.Request[private.EnableAddonRequest]) (*connect_go.Response[private.EnableAddonResponse], error) {
	return c.enableAddon.CallUnary(ctx, req)
}

// ListAddons calls addons.v1.private.PrivateAddonsService.ListAddons.
func (c *privateAddonsServiceClient) ListAddons(ctx context.Context, req *connect_go.Request[private.ListAddonsRequest]) (*connect_go.Response[private.ListAddonsResponse], error) {
	return c.listAddons.CallUnary(ctx, req)
}

// PrivateAddonsServiceHandler is an implementation of the addons.v1.private.PrivateAddonsService
// service.
type PrivateAddonsServiceHandler interface {
	EnableAddon(context.Context, *connect_go.Request[private.EnableAddonRequest]) (*connect_go.Response[private.EnableAddonResponse], error)
	ListAddons(context.Context, *connect_go.Request[private.ListAddonsRequest]) (*connect_go.Response[private.ListAddonsResponse], error)
}

// NewPrivateAddonsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPrivateAddonsServiceHandler(svc PrivateAddonsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	privateAddonsServiceEnableAddonHandler := connect_go.NewUnaryHandler(
		PrivateAddonsServiceEnableAddonProcedure,
		svc.EnableAddon,
		opts...,
	)
	privateAddonsServiceListAddonsHandler := connect_go.NewUnaryHandler(
		PrivateAddonsServiceListAddonsProcedure,
		svc.ListAddons,
		opts...,
	)
	return "/addons.v1.private.PrivateAddonsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PrivateAddonsServiceEnableAddonProcedure:
			privateAddonsServiceEnableAddonHandler.ServeHTTP(w, r)
		case PrivateAddonsServiceListAddonsProcedure:
			privateAddonsServiceListAddonsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPrivateAddonsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPrivateAddonsServiceHandler struct{}

func (UnimplementedPrivateAddonsServiceHandler) EnableAddon(context.Context, *connect_go.Request[private.EnableAddonRequest]) (*connect_go.Response[private.EnableAddonResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("addons.v1.private.PrivateAddonsService.EnableAddon is not implemented"))
}

func (UnimplementedPrivateAddonsServiceHandler) ListAddons(context.Context, *connect_go.Request[private.ListAddonsRequest]) (*connect_go.Response[private.ListAddonsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("addons.v1.private.PrivateAddonsService.ListAddons is not implemented"))
}
